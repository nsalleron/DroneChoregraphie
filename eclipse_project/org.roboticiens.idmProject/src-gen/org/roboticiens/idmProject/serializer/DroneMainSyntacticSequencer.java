/*
 * generated by Xtext 2.12.0
 */
package org.roboticiens.idmProject.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.roboticiens.idmProject.services.DroneMainGrammarAccess;

@SuppressWarnings("all")
public class DroneMainSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DroneMainGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Import_LineFeedKeyword_4_a;
	protected AbstractElementAlias match_Main_LineFeedKeyword_3_a;
	protected AbstractElementAlias match_Main_LineFeedKeyword_3_q;
	protected AbstractElementAlias match_Main_LineFeedKeyword_5_a;
	protected AbstractElementAlias match_Main_LineFeedKeyword_7_a;
	protected AbstractElementAlias match_Main_LineFeedKeyword_9_a;
	protected AbstractElementAlias match_Model_LineFeedKeyword_11_a;
	protected AbstractElementAlias match_Model_LineFeedKeyword_14_a;
	protected AbstractElementAlias match_Model_LineFeedKeyword_1_a;
	protected AbstractElementAlias match_Model_LineFeedKeyword_3_a;
	protected AbstractElementAlias match_Model_LineFeedKeyword_5_a;
	protected AbstractElementAlias match_Model_LineFeedKeyword_7_a;
	protected AbstractElementAlias match_Model_LineFeedKeyword_9_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DroneMainGrammarAccess) access;
		match_Import_LineFeedKeyword_4_a = new TokenAlias(true, true, grammarAccess.getImportAccess().getLineFeedKeyword_4());
		match_Main_LineFeedKeyword_3_a = new TokenAlias(true, true, grammarAccess.getMainAccess().getLineFeedKeyword_3());
		match_Main_LineFeedKeyword_3_q = new TokenAlias(false, true, grammarAccess.getMainAccess().getLineFeedKeyword_3());
		match_Main_LineFeedKeyword_5_a = new TokenAlias(true, true, grammarAccess.getMainAccess().getLineFeedKeyword_5());
		match_Main_LineFeedKeyword_7_a = new TokenAlias(true, true, grammarAccess.getMainAccess().getLineFeedKeyword_7());
		match_Main_LineFeedKeyword_9_a = new TokenAlias(true, true, grammarAccess.getMainAccess().getLineFeedKeyword_9());
		match_Model_LineFeedKeyword_11_a = new TokenAlias(true, true, grammarAccess.getModelAccess().getLineFeedKeyword_11());
		match_Model_LineFeedKeyword_14_a = new TokenAlias(true, true, grammarAccess.getModelAccess().getLineFeedKeyword_14());
		match_Model_LineFeedKeyword_1_a = new TokenAlias(true, true, grammarAccess.getModelAccess().getLineFeedKeyword_1());
		match_Model_LineFeedKeyword_3_a = new TokenAlias(true, true, grammarAccess.getModelAccess().getLineFeedKeyword_3());
		match_Model_LineFeedKeyword_5_a = new TokenAlias(true, true, grammarAccess.getModelAccess().getLineFeedKeyword_5());
		match_Model_LineFeedKeyword_7_a = new TokenAlias(true, true, grammarAccess.getModelAccess().getLineFeedKeyword_7());
		match_Model_LineFeedKeyword_9_a = new TokenAlias(true, true, grammarAccess.getModelAccess().getLineFeedKeyword_9());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getEndRule())
			return getEndToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getStartRule())
			return getStartToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * End:
	 * 	Atterrir
	 * ;
	 */
	protected String getEndToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "atterrir()";
	}
	
	/**
	 * Start:
	 * 	Decoller
	 * ;
	 */
	protected String getStartToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "decoller()";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Import_LineFeedKeyword_4_a.equals(syntax))
				emit_Import_LineFeedKeyword_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Main_LineFeedKeyword_3_a.equals(syntax))
				emit_Main_LineFeedKeyword_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Main_LineFeedKeyword_3_q.equals(syntax))
				emit_Main_LineFeedKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Main_LineFeedKeyword_5_a.equals(syntax))
				emit_Main_LineFeedKeyword_5_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Main_LineFeedKeyword_7_a.equals(syntax))
				emit_Main_LineFeedKeyword_7_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Main_LineFeedKeyword_9_a.equals(syntax))
				emit_Main_LineFeedKeyword_9_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_LineFeedKeyword_11_a.equals(syntax))
				emit_Model_LineFeedKeyword_11_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_LineFeedKeyword_14_a.equals(syntax))
				emit_Model_LineFeedKeyword_14_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_LineFeedKeyword_1_a.equals(syntax))
				emit_Model_LineFeedKeyword_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_LineFeedKeyword_3_a.equals(syntax))
				emit_Model_LineFeedKeyword_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_LineFeedKeyword_5_a.equals(syntax))
				emit_Model_LineFeedKeyword_5_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_LineFeedKeyword_7_a.equals(syntax))
				emit_Model_LineFeedKeyword_7_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_LineFeedKeyword_9_a.equals(syntax))
				emit_Model_LineFeedKeyword_9_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '
	  *     '*
	 *
	 * This ambiguous syntax occurs at:
	 *     importURI=INCLUDE '>' (ambiguity) (rule end)
	 */
	protected void emit_Import_LineFeedKeyword_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '
	  *     '*
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         (rule start) 
	 *         'main' 
	 *         '{' 
	 *         Start 
	 *         (ambiguity) 
	 *         '
	 *         '* 
	 *         End 
	 *         '
	 *         '* 
	 *         '}' 
	 *         '
	 *         '* 
	 *         (rule start)
	 *     )
	 */
	protected void emit_Main_LineFeedKeyword_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '
	  *     '?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'main' '{' Start (ambiguity) PourDec+=PourcentDecl
	 *     (rule start) 'main' '{' Start (ambiguity) SeconDec+=IntDecl
	 *     (rule start) 'main' '{' Start (ambiguity) fonctions+=FonctionCall
	 *     (rule start) 'main' '{' Start (ambiguity) parallele+=Parallele2
	 *     (rule start) 'main' '{' Start (ambiguity) parallele+=Parallele3
	 *     (rule start) 'main' '{' Start (ambiguity) statements+=Statement
	 */
	protected void emit_Main_LineFeedKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '
	  *     '*
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         (rule start) 
	 *         'main' 
	 *         '{' 
	 *         Start 
	 *         '
	 *         '* 
	 *         (ambiguity) 
	 *         End 
	 *         '
	 *         '* 
	 *         '}' 
	 *         '
	 *         '* 
	 *         (rule start)
	 *     )
	 *     (
	 *         PourDec+=PourcentDecl 
	 *         (ambiguity) 
	 *         End 
	 *         '
	 *         '* 
	 *         '}' 
	 *         '
	 *         '* 
	 *         (rule end)
	 *     )
	 *     (
	 *         SeconDec+=IntDecl 
	 *         (ambiguity) 
	 *         End 
	 *         '
	 *         '* 
	 *         '}' 
	 *         '
	 *         '* 
	 *         (rule end)
	 *     )
	 *     (
	 *         fonctions+=FonctionCall 
	 *         (ambiguity) 
	 *         End 
	 *         '
	 *         '* 
	 *         '}' 
	 *         '
	 *         '* 
	 *         (rule end)
	 *     )
	 *     (
	 *         parallele+=Parallele2 
	 *         (ambiguity) 
	 *         End 
	 *         '
	 *         '* 
	 *         '}' 
	 *         '
	 *         '* 
	 *         (rule end)
	 *     )
	 *     (
	 *         parallele+=Parallele3 
	 *         (ambiguity) 
	 *         End 
	 *         '
	 *         '* 
	 *         '}' 
	 *         '
	 *         '* 
	 *         (rule end)
	 *     )
	 *     (
	 *         statements+=Statement 
	 *         (ambiguity) 
	 *         End 
	 *         '
	 *         '* 
	 *         '}' 
	 *         '
	 *         '* 
	 *         (rule end)
	 *     )
	 */
	protected void emit_Main_LineFeedKeyword_5_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '
	  *     '*
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         (rule start) 
	 *         'main' 
	 *         '{' 
	 *         Start 
	 *         '
	 *         '* 
	 *         '
	 *         '* 
	 *         End 
	 *         (ambiguity) 
	 *         '}' 
	 *         '
	 *         '* 
	 *         (rule start)
	 *     )
	 *     (
	 *         PourDec+=PourcentDecl 
	 *         '
	 *         '* 
	 *         End 
	 *         (ambiguity) 
	 *         '}' 
	 *         '
	 *         '* 
	 *         (rule end)
	 *     )
	 *     (
	 *         SeconDec+=IntDecl 
	 *         '
	 *         '* 
	 *         End 
	 *         (ambiguity) 
	 *         '}' 
	 *         '
	 *         '* 
	 *         (rule end)
	 *     )
	 *     (
	 *         fonctions+=FonctionCall 
	 *         '
	 *         '* 
	 *         End 
	 *         (ambiguity) 
	 *         '}' 
	 *         '
	 *         '* 
	 *         (rule end)
	 *     )
	 *     (
	 *         parallele+=Parallele2 
	 *         '
	 *         '* 
	 *         End 
	 *         (ambiguity) 
	 *         '}' 
	 *         '
	 *         '* 
	 *         (rule end)
	 *     )
	 *     (
	 *         parallele+=Parallele3 
	 *         '
	 *         '* 
	 *         End 
	 *         (ambiguity) 
	 *         '}' 
	 *         '
	 *         '* 
	 *         (rule end)
	 *     )
	 *     (
	 *         statements+=Statement 
	 *         '
	 *         '* 
	 *         End 
	 *         (ambiguity) 
	 *         '}' 
	 *         '
	 *         '* 
	 *         (rule end)
	 *     )
	 */
	protected void emit_Main_LineFeedKeyword_7_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '
	  *     '*
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         (rule start) 
	 *         'main' 
	 *         '{' 
	 *         Start 
	 *         '
	 *         '* 
	 *         '
	 *         '* 
	 *         End 
	 *         '
	 *         '* 
	 *         '}' 
	 *         (ambiguity) 
	 *         (rule start)
	 *     )
	 *     (
	 *         PourDec+=PourcentDecl 
	 *         '
	 *         '* 
	 *         End 
	 *         '
	 *         '* 
	 *         '}' 
	 *         (ambiguity) 
	 *         (rule end)
	 *     )
	 *     (
	 *         SeconDec+=IntDecl 
	 *         '
	 *         '* 
	 *         End 
	 *         '
	 *         '* 
	 *         '}' 
	 *         (ambiguity) 
	 *         (rule end)
	 *     )
	 *     (
	 *         fonctions+=FonctionCall 
	 *         '
	 *         '* 
	 *         End 
	 *         '
	 *         '* 
	 *         '}' 
	 *         (ambiguity) 
	 *         (rule end)
	 *     )
	 *     (
	 *         parallele+=Parallele2 
	 *         '
	 *         '* 
	 *         End 
	 *         '
	 *         '* 
	 *         '}' 
	 *         (ambiguity) 
	 *         (rule end)
	 *     )
	 *     (
	 *         parallele+=Parallele3 
	 *         '
	 *         '* 
	 *         End 
	 *         '
	 *         '* 
	 *         '}' 
	 *         (ambiguity) 
	 *         (rule end)
	 *     )
	 *     (
	 *         statements+=Statement 
	 *         '
	 *         '* 
	 *         End 
	 *         '
	 *         '* 
	 *         '}' 
	 *         (ambiguity) 
	 *         (rule end)
	 *     )
	 */
	protected void emit_Main_LineFeedKeyword_9_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '
	  *     '*
	 *
	 * This ambiguous syntax occurs at:
	 *     em+=Eloignement_max (ambiguity) m=Main
	 */
	protected void emit_Model_LineFeedKeyword_11_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '
	  *     '*
	 *
	 * This ambiguous syntax occurs at:
	 *     fonctions+=FonctionDecl (ambiguity) (rule end)
	 *     m=Main (ambiguity) (rule end)
	 */
	protected void emit_Model_LineFeedKeyword_14_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '
	  *     '*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) pvhm+=Pourcent_vitesse_hauteur_max
	 *     imports+=Import (ambiguity) pvhm+=Pourcent_vitesse_hauteur_max
	 */
	protected void emit_Model_LineFeedKeyword_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '
	  *     '*
	 *
	 * This ambiguous syntax occurs at:
	 *     pvhm+=Pourcent_vitesse_hauteur_max (ambiguity) pvdm+=Pourcent_vitesse_deplacement_max
	 */
	protected void emit_Model_LineFeedKeyword_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '
	  *     '*
	 *
	 * This ambiguous syntax occurs at:
	 *     pvdm+=Pourcent_vitesse_deplacement_max (ambiguity) pvrm+=Pourcent_vitesse_rotation_max
	 */
	protected void emit_Model_LineFeedKeyword_5_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '
	  *     '*
	 *
	 * This ambiguous syntax occurs at:
	 *     pvrm+=Pourcent_vitesse_rotation_max (ambiguity) hm+=Hauteur_max
	 */
	protected void emit_Model_LineFeedKeyword_7_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '
	  *     '*
	 *
	 * This ambiguous syntax occurs at:
	 *     hm+=Hauteur_max (ambiguity) em+=Eloignement_max
	 */
	protected void emit_Model_LineFeedKeyword_9_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
