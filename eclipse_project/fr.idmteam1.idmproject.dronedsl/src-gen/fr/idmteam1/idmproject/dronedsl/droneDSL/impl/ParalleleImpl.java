/**
 * generated by Xtext 2.12.0
 */
package fr.idmteam1.idmproject.dronedsl.droneDSL.impl;

import fr.idmteam1.idmproject.dronedsl.droneDSL.DroneDSLPackage;
import fr.idmteam1.idmproject.dronedsl.droneDSL.Main;
import fr.idmteam1.idmproject.dronedsl.droneDSL.Parallele;
import fr.idmteam1.idmproject.dronedsl.droneDSL.VarDecl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Parallele</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.idmteam1.idmproject.dronedsl.droneDSL.impl.ParalleleImpl#getDecollage <em>Decollage</em>}</li>
 *   <li>{@link fr.idmteam1.idmproject.dronedsl.droneDSL.impl.ParalleleImpl#getMainbody <em>Mainbody</em>}</li>
 *   <li>{@link fr.idmteam1.idmproject.dronedsl.droneDSL.impl.ParalleleImpl#getA <em>A</em>}</li>
 *   <li>{@link fr.idmteam1.idmproject.dronedsl.droneDSL.impl.ParalleleImpl#getB <em>B</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ParalleleImpl extends FonctionDeclImpl implements Parallele
{
  /**
   * The default value of the '{@link #getDecollage() <em>Decollage</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDecollage()
   * @generated
   * @ordered
   */
  protected static final String DECOLLAGE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDecollage() <em>Decollage</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDecollage()
   * @generated
   * @ordered
   */
  protected String decollage = DECOLLAGE_EDEFAULT;

  /**
   * The cached value of the '{@link #getMainbody() <em>Mainbody</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMainbody()
   * @generated
   * @ordered
   */
  protected EList<VarDecl> mainbody;

  /**
   * The cached value of the '{@link #getA() <em>A</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getA()
   * @generated
   * @ordered
   */
  protected EObject a;

  /**
   * The cached value of the '{@link #getB() <em>B</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getB()
   * @generated
   * @ordered
   */
  protected EObject b;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParalleleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DroneDSLPackage.Literals.PARALLELE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDecollage()
  {
    return decollage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDecollage(String newDecollage)
  {
    String oldDecollage = decollage;
    decollage = newDecollage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DroneDSLPackage.PARALLELE__DECOLLAGE, oldDecollage, decollage));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<VarDecl> getMainbody()
  {
    if (mainbody == null)
    {
      mainbody = new EObjectContainmentEList<VarDecl>(VarDecl.class, this, DroneDSLPackage.PARALLELE__MAINBODY);
    }
    return mainbody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject getA()
  {
    return a;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetA(EObject newA, NotificationChain msgs)
  {
    EObject oldA = a;
    a = newA;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DroneDSLPackage.PARALLELE__A, oldA, newA);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setA(EObject newA)
  {
    if (newA != a)
    {
      NotificationChain msgs = null;
      if (a != null)
        msgs = ((InternalEObject)a).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DroneDSLPackage.PARALLELE__A, null, msgs);
      if (newA != null)
        msgs = ((InternalEObject)newA).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DroneDSLPackage.PARALLELE__A, null, msgs);
      msgs = basicSetA(newA, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DroneDSLPackage.PARALLELE__A, newA, newA));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject getB()
  {
    return b;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetB(EObject newB, NotificationChain msgs)
  {
    EObject oldB = b;
    b = newB;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DroneDSLPackage.PARALLELE__B, oldB, newB);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setB(EObject newB)
  {
    if (newB != b)
    {
      NotificationChain msgs = null;
      if (b != null)
        msgs = ((InternalEObject)b).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DroneDSLPackage.PARALLELE__B, null, msgs);
      if (newB != null)
        msgs = ((InternalEObject)newB).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DroneDSLPackage.PARALLELE__B, null, msgs);
      msgs = basicSetB(newB, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DroneDSLPackage.PARALLELE__B, newB, newB));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DroneDSLPackage.PARALLELE__MAINBODY:
        return ((InternalEList<?>)getMainbody()).basicRemove(otherEnd, msgs);
      case DroneDSLPackage.PARALLELE__A:
        return basicSetA(null, msgs);
      case DroneDSLPackage.PARALLELE__B:
        return basicSetB(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DroneDSLPackage.PARALLELE__DECOLLAGE:
        return getDecollage();
      case DroneDSLPackage.PARALLELE__MAINBODY:
        return getMainbody();
      case DroneDSLPackage.PARALLELE__A:
        return getA();
      case DroneDSLPackage.PARALLELE__B:
        return getB();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DroneDSLPackage.PARALLELE__DECOLLAGE:
        setDecollage((String)newValue);
        return;
      case DroneDSLPackage.PARALLELE__MAINBODY:
        getMainbody().clear();
        getMainbody().addAll((Collection<? extends VarDecl>)newValue);
        return;
      case DroneDSLPackage.PARALLELE__A:
        setA((EObject)newValue);
        return;
      case DroneDSLPackage.PARALLELE__B:
        setB((EObject)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DroneDSLPackage.PARALLELE__DECOLLAGE:
        setDecollage(DECOLLAGE_EDEFAULT);
        return;
      case DroneDSLPackage.PARALLELE__MAINBODY:
        getMainbody().clear();
        return;
      case DroneDSLPackage.PARALLELE__A:
        setA((EObject)null);
        return;
      case DroneDSLPackage.PARALLELE__B:
        setB((EObject)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DroneDSLPackage.PARALLELE__DECOLLAGE:
        return DECOLLAGE_EDEFAULT == null ? decollage != null : !DECOLLAGE_EDEFAULT.equals(decollage);
      case DroneDSLPackage.PARALLELE__MAINBODY:
        return mainbody != null && !mainbody.isEmpty();
      case DroneDSLPackage.PARALLELE__A:
        return a != null;
      case DroneDSLPackage.PARALLELE__B:
        return b != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == Main.class)
    {
      switch (derivedFeatureID)
      {
        case DroneDSLPackage.PARALLELE__DECOLLAGE: return DroneDSLPackage.MAIN__DECOLLAGE;
        case DroneDSLPackage.PARALLELE__MAINBODY: return DroneDSLPackage.MAIN__MAINBODY;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == Main.class)
    {
      switch (baseFeatureID)
      {
        case DroneDSLPackage.MAIN__DECOLLAGE: return DroneDSLPackage.PARALLELE__DECOLLAGE;
        case DroneDSLPackage.MAIN__MAINBODY: return DroneDSLPackage.PARALLELE__MAINBODY;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (decollage: ");
    result.append(decollage);
    result.append(')');
    return result.toString();
  }

} //ParalleleImpl
