/*
 * generated by Xtext 2.12.0
 */
package fr.idmteam1.idmproject.dronedsl.serializer;

import com.google.inject.Inject;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.Atterrir;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.Avancer;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.Decoller;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.Descendre;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.Droite;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.DroneDSLLibPackage;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.FonctionCall;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.FonctionDecl;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.Gauche;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.Model;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.Monter;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.Parallele2;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.Parallele3;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.Parallele4;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.Pause;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.PourcentConst;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.PourcentDecl;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.Reculer;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.RefPourcentVar;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.RefSecondeVar;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.RotationDroite;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.RotationGauche;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.SecondeConst;
import fr.idmteam1.idmproject.dronedsl.droneDSLLib.SecondeDecl;
import fr.idmteam1.idmproject.dronedsl.services.DroneDSLLibGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DroneDSLLibSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DroneDSLLibGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DroneDSLLibPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DroneDSLLibPackage.ATTERRIR:
				sequence_Atterrir(context, (Atterrir) semanticObject); 
				return; 
			case DroneDSLLibPackage.AVANCER:
				sequence_Avancer(context, (Avancer) semanticObject); 
				return; 
			case DroneDSLLibPackage.DECOLLER:
				sequence_Decoller(context, (Decoller) semanticObject); 
				return; 
			case DroneDSLLibPackage.DESCENDRE:
				sequence_Descendre(context, (Descendre) semanticObject); 
				return; 
			case DroneDSLLibPackage.DROITE:
				sequence_Droite(context, (Droite) semanticObject); 
				return; 
			case DroneDSLLibPackage.FONCTION_CALL:
				sequence_FonctionCall(context, (FonctionCall) semanticObject); 
				return; 
			case DroneDSLLibPackage.FONCTION_DECL:
				sequence_FonctionDecl(context, (FonctionDecl) semanticObject); 
				return; 
			case DroneDSLLibPackage.GAUCHE:
				sequence_Gauche(context, (Gauche) semanticObject); 
				return; 
			case DroneDSLLibPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case DroneDSLLibPackage.MONTER:
				sequence_Monter(context, (Monter) semanticObject); 
				return; 
			case DroneDSLLibPackage.PARALLELE2:
				sequence_Parallele2(context, (Parallele2) semanticObject); 
				return; 
			case DroneDSLLibPackage.PARALLELE3:
				sequence_Parallele3(context, (Parallele3) semanticObject); 
				return; 
			case DroneDSLLibPackage.PARALLELE4:
				sequence_Parallele4(context, (Parallele4) semanticObject); 
				return; 
			case DroneDSLLibPackage.PAUSE:
				sequence_Pause(context, (Pause) semanticObject); 
				return; 
			case DroneDSLLibPackage.POURCENT_CONST:
				sequence_PourcentConst(context, (PourcentConst) semanticObject); 
				return; 
			case DroneDSLLibPackage.POURCENT_DECL:
				sequence_PourcentDecl(context, (PourcentDecl) semanticObject); 
				return; 
			case DroneDSLLibPackage.RECULER:
				sequence_Reculer(context, (Reculer) semanticObject); 
				return; 
			case DroneDSLLibPackage.REF_POURCENT_VAR:
				sequence_RefPourcentVar(context, (RefPourcentVar) semanticObject); 
				return; 
			case DroneDSLLibPackage.REF_SECONDE_VAR:
				sequence_RefSecondeVar(context, (RefSecondeVar) semanticObject); 
				return; 
			case DroneDSLLibPackage.ROTATION_DROITE:
				sequence_RotationDroite(context, (RotationDroite) semanticObject); 
				return; 
			case DroneDSLLibPackage.ROTATION_GAUCHE:
				sequence_RotationGauche(context, (RotationGauche) semanticObject); 
				return; 
			case DroneDSLLibPackage.SECONDE_CONST:
				sequence_SecondeConst(context, (SecondeConst) semanticObject); 
				return; 
			case DroneDSLLibPackage.SECONDE_DECL:
				sequence_SecondeDecl(context, (SecondeDecl) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Atterrir returns Atterrir
	 *     CommandeBasique returns Atterrir
	 *
	 * Constraint:
	 *     str='atterrir()'
	 */
	protected void sequence_Atterrir(ISerializationContext context, Atterrir semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.ATTERRIR__STR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.ATTERRIR__STR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtterrirAccess().getStrAtterrirKeyword_0(), semanticObject.getStr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Avancer returns Avancer
	 *     Mouvement returns Avancer
	 *     CommandeBasique returns Avancer
	 *     AR returns Avancer
	 *
	 * Constraint:
	 *     (duree=SecondeExp vitesse_deplacement=PourcentExp)
	 */
	protected void sequence_Avancer(ISerializationContext context, Avancer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.AVANCER__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.AVANCER__DUREE));
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.AVANCER__VITESSE_DEPLACEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.AVANCER__VITESSE_DEPLACEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAvancerAccess().getDureeSecondeExpParserRuleCall_1_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getAvancerAccess().getVitesse_deplacementPourcentExpParserRuleCall_3_0(), semanticObject.getVitesse_deplacement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Decoller returns Decoller
	 *     CommandeBasique returns Decoller
	 *
	 * Constraint:
	 *     str='decoller()'
	 */
	protected void sequence_Decoller(ISerializationContext context, Decoller semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.DECOLLER__STR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.DECOLLER__STR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDecollerAccess().getStrDecollerKeyword_0(), semanticObject.getStr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Descendre returns Descendre
	 *     Mouvement returns Descendre
	 *     CommandeBasique returns Descendre
	 *     MD returns Descendre
	 *
	 * Constraint:
	 *     (duree=SecondeExp vitesse_verticale=PourcentExp)
	 */
	protected void sequence_Descendre(ISerializationContext context, Descendre semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.DESCENDRE__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.DESCENDRE__DUREE));
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.DESCENDRE__VITESSE_VERTICALE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.DESCENDRE__VITESSE_VERTICALE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDescendreAccess().getDureeSecondeExpParserRuleCall_1_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getDescendreAccess().getVitesse_verticalePourcentExpParserRuleCall_3_0(), semanticObject.getVitesse_verticale());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Droite returns Droite
	 *     Mouvement returns Droite
	 *     CommandeBasique returns Droite
	 *     GDr returns Droite
	 *
	 * Constraint:
	 *     (duree=SecondeExp vitesse_deplacement=PourcentExp)
	 */
	protected void sequence_Droite(ISerializationContext context, Droite semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.DROITE__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.DROITE__DUREE));
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.DROITE__VITESSE_DEPLACEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.DROITE__VITESSE_DEPLACEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDroiteAccess().getDureeSecondeExpParserRuleCall_1_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getDroiteAccess().getVitesse_deplacementPourcentExpParserRuleCall_3_0(), semanticObject.getVitesse_deplacement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FonctionCall returns FonctionCall
	 *
	 * Constraint:
	 *     ref=[FonctionDecl|ID]
	 */
	protected void sequence_FonctionCall(ISerializationContext context, FonctionCall semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.FONCTION_CALL__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.FONCTION_CALL__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFonctionCallAccess().getRefFonctionDeclIDTerminalRuleCall_0_0_1(), semanticObject.eGet(DroneDSLLibPackage.Literals.FONCTION_CALL__REF, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FonctionDecl returns FonctionDecl
	 *
	 * Constraint:
	 *     (name=ID (body+=VarDecl | body+=CommandeBasique | body+=Parallele | body+=FonctionCall)*)
	 */
	protected void sequence_FonctionDecl(ISerializationContext context, FonctionDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Gauche returns Gauche
	 *     Mouvement returns Gauche
	 *     CommandeBasique returns Gauche
	 *     GDr returns Gauche
	 *
	 * Constraint:
	 *     (duree=SecondeExp vitesse_deplacement=PourcentExp)
	 */
	protected void sequence_Gauche(ISerializationContext context, Gauche semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.GAUCHE__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.GAUCHE__DUREE));
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.GAUCHE__VITESSE_DEPLACEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.GAUCHE__VITESSE_DEPLACEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGaucheAccess().getDureeSecondeExpParserRuleCall_1_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getGaucheAccess().getVitesse_deplacementPourcentExpParserRuleCall_3_0(), semanticObject.getVitesse_deplacement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     fonctions+=FonctionDecl+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Monter returns Monter
	 *     Mouvement returns Monter
	 *     CommandeBasique returns Monter
	 *     MD returns Monter
	 *
	 * Constraint:
	 *     (duree=SecondeExp vitesse_verticale=PourcentExp)
	 */
	protected void sequence_Monter(ISerializationContext context, Monter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.MONTER__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.MONTER__DUREE));
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.MONTER__VITESSE_VERTICALE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.MONTER__VITESSE_VERTICALE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMonterAccess().getDureeSecondeExpParserRuleCall_1_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getMonterAccess().getVitesse_verticalePourcentExpParserRuleCall_3_0(), semanticObject.getVitesse_verticale());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Mouvement returns Parallele2
	 *     Parallele returns Parallele2
	 *     Parallele2 returns Parallele2
	 *
	 * Constraint:
	 *     (
	 *         (a=MD t=GDr) | 
	 *         (a=MD t=AR) | 
	 *         (a=MD t=RGRD) | 
	 *         (t=GDr b=AR) | 
	 *         (t=GDr b=MD) | 
	 *         (t=GDr b=RGRD) | 
	 *         (t=RGRD a=MD) | 
	 *         (t=RGRD a=AR) | 
	 *         (t=RGRD a=GDr) | 
	 *         (t=AR a=MD) | 
	 *         (t=AR a=RGRD) | 
	 *         (t=AR a=GDr)
	 *     )
	 */
	protected void sequence_Parallele2(ISerializationContext context, Parallele2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mouvement returns Parallele3
	 *     Parallele returns Parallele3
	 *     Parallele3 returns Parallele3
	 *
	 * Constraint:
	 *     (
	 *         (a=AR b=GDr c=MD) | 
	 *         (a=AR b=GDr c=RGRD) | 
	 *         (a=AR b=MD c=GDr) | 
	 *         (a=AR b=MD c=RGRD) | 
	 *         (a=AR b=RGRD c=MD) | 
	 *         (a=AR b=RGRD c=GDr) | 
	 *         (a=GDr b=AR c=MD) | 
	 *         (a=GDr b=AR c=RGRD) | 
	 *         (a=GDr b=MD c=AR) | 
	 *         (a=GDr b=MD c=RGRD) | 
	 *         (a=GDr b=RGRD c=AR) | 
	 *         (a=GDr b=RGRD c=MD) | 
	 *         (a=MD b=AR c=GDr) | 
	 *         (a=MD b=AR c=RGRD) | 
	 *         (a=MD b=GDr c=AR) | 
	 *         (a=MD b=GDr c=RGRD) | 
	 *         (a=MD b=RGRD c=GDr) | 
	 *         (a=MD b=RGRD c=AR) | 
	 *         (a=RGRD b=AR c=MD) | 
	 *         (a=RGRD b=AR c=GDr) | 
	 *         (a=RGRD b=MD c=AR) | 
	 *         (a=RGRD b=MD c=GDr) | 
	 *         (a=RGRD b=GDr c=MD) | 
	 *         (a=RGRD b=GDr c=AR)
	 *     )
	 */
	protected void sequence_Parallele3(ISerializationContext context, Parallele3 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mouvement returns Parallele4
	 *     Parallele returns Parallele4
	 *     Parallele4 returns Parallele4
	 *
	 * Constraint:
	 *     (
	 *         (a=AR b=GDr c=MD d=RGRD) | 
	 *         (a=AR b=GDr c=RGRD d=MD) | 
	 *         (a=AR b=MD c=GDr d=RGRD) | 
	 *         (a=AR b=MD c=RGRD d=GDr) | 
	 *         (a=AR b=RGRD c=MD d=GDr) | 
	 *         (a=AR b=RGRD c=GDr d=MD) | 
	 *         (a=GDr b=AR c=MD d=RGRD) | 
	 *         (a=GDr b=AR c=RGRD d=MD) | 
	 *         (a=GDr b=MD c=AR d=RGRD) | 
	 *         (a=GDr b=MD c=RGRD d=AR) | 
	 *         (a=GDr b=RGRD c=AR d=MD) | 
	 *         (a=GDr b=RGRD c=MD d=AR) | 
	 *         (a=MD b=AR c=GDr d=RGRD) | 
	 *         (a=MD b=AR c=RGRD d=GDr) | 
	 *         (a=MD b=GDr c=AR d=RGRD) | 
	 *         (a=MD b=GDr c=RGRD d=AR) | 
	 *         (a=MD b=RGRD c=GDr d=AR) | 
	 *         (a=MD b=RGRD c=AR d=GDr) | 
	 *         (a=RGRD b=AR c=MD d=GDr) | 
	 *         (a=RGRD b=AR c=GDr d=MD) | 
	 *         (a=RGRD b=MD c=AR d=GDr) | 
	 *         (a=RGRD b=MD c=GDr d=AR) | 
	 *         (a=RGRD b=GDr c=MD d=AR) | 
	 *         (a=RGRD b=GDr c=AR d=MD)
	 *     )
	 */
	protected void sequence_Parallele4(ISerializationContext context, Parallele4 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Pause returns Pause
	 *     CommandeBasique returns Pause
	 *
	 * Constraint:
	 *     duree=SecondeExp
	 */
	protected void sequence_Pause(ISerializationContext context, Pause semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.PAUSE__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.PAUSE__DUREE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPauseAccess().getDureeSecondeExpParserRuleCall_1_0(), semanticObject.getDuree());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PourcentConst returns PourcentConst
	 *     PourcentExp returns PourcentConst
	 *
	 * Constraint:
	 *     val=POURCENT
	 */
	protected void sequence_PourcentConst(ISerializationContext context, PourcentConst semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.POURCENT_CONST__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.POURCENT_CONST__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPourcentConstAccess().getValPOURCENTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PourcentDecl returns PourcentDecl
	 *     VarDecl returns PourcentDecl
	 *
	 * Constraint:
	 *     (name=ID val=PourcentConst)
	 */
	protected void sequence_PourcentDecl(ISerializationContext context, PourcentDecl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.VAR_DECL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.VAR_DECL__NAME));
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.POURCENT_DECL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.POURCENT_DECL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPourcentDeclAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPourcentDeclAccess().getValPourcentConstParserRuleCall_3_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Reculer returns Reculer
	 *     Mouvement returns Reculer
	 *     CommandeBasique returns Reculer
	 *     AR returns Reculer
	 *
	 * Constraint:
	 *     (duree=SecondeExp vitesse_deplacement=PourcentExp)
	 */
	protected void sequence_Reculer(ISerializationContext context, Reculer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.RECULER__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.RECULER__DUREE));
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.RECULER__VITESSE_DEPLACEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.RECULER__VITESSE_DEPLACEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReculerAccess().getDureeSecondeExpParserRuleCall_1_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getReculerAccess().getVitesse_deplacementPourcentExpParserRuleCall_3_0(), semanticObject.getVitesse_deplacement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RefPourcentVar returns RefPourcentVar
	 *     PourcentExp returns RefPourcentVar
	 *
	 * Constraint:
	 *     var=[PourcentDecl|ID]
	 */
	protected void sequence_RefPourcentVar(ISerializationContext context, RefPourcentVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.REF_POURCENT_VAR__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.REF_POURCENT_VAR__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefPourcentVarAccess().getVarPourcentDeclIDTerminalRuleCall_0_1(), semanticObject.eGet(DroneDSLLibPackage.Literals.REF_POURCENT_VAR__VAR, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RefSecondeVar returns RefSecondeVar
	 *     SecondeExp returns RefSecondeVar
	 *
	 * Constraint:
	 *     var=[SecondeDecl|ID]
	 */
	protected void sequence_RefSecondeVar(ISerializationContext context, RefSecondeVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.REF_SECONDE_VAR__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.REF_SECONDE_VAR__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefSecondeVarAccess().getVarSecondeDeclIDTerminalRuleCall_0_1(), semanticObject.eGet(DroneDSLLibPackage.Literals.REF_SECONDE_VAR__VAR, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RotationDroite returns RotationDroite
	 *     Mouvement returns RotationDroite
	 *     CommandeBasique returns RotationDroite
	 *     RGRD returns RotationDroite
	 *
	 * Constraint:
	 *     (duree=SecondeExp vitesse_rotation=PourcentExp)
	 */
	protected void sequence_RotationDroite(ISerializationContext context, RotationDroite semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.ROTATION_DROITE__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.ROTATION_DROITE__DUREE));
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.ROTATION_DROITE__VITESSE_ROTATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.ROTATION_DROITE__VITESSE_ROTATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRotationDroiteAccess().getDureeSecondeExpParserRuleCall_1_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getRotationDroiteAccess().getVitesse_rotationPourcentExpParserRuleCall_3_0(), semanticObject.getVitesse_rotation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RotationGauche returns RotationGauche
	 *     Mouvement returns RotationGauche
	 *     CommandeBasique returns RotationGauche
	 *     RGRD returns RotationGauche
	 *
	 * Constraint:
	 *     (duree=SecondeExp vitesse_rotation=PourcentExp)
	 */
	protected void sequence_RotationGauche(ISerializationContext context, RotationGauche semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.ROTATION_GAUCHE__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.ROTATION_GAUCHE__DUREE));
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.ROTATION_GAUCHE__VITESSE_ROTATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.ROTATION_GAUCHE__VITESSE_ROTATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRotationGaucheAccess().getDureeSecondeExpParserRuleCall_1_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getRotationGaucheAccess().getVitesse_rotationPourcentExpParserRuleCall_3_0(), semanticObject.getVitesse_rotation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SecondeConst returns SecondeConst
	 *     SecondeExp returns SecondeConst
	 *
	 * Constraint:
	 *     val=SECONDE
	 */
	protected void sequence_SecondeConst(ISerializationContext context, SecondeConst semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.SECONDE_CONST__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.SECONDE_CONST__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSecondeConstAccess().getValSECONDETerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SecondeDecl returns SecondeDecl
	 *     VarDecl returns SecondeDecl
	 *
	 * Constraint:
	 *     (name=ID val=SecondeConst)
	 */
	protected void sequence_SecondeDecl(ISerializationContext context, SecondeDecl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.VAR_DECL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.VAR_DECL__NAME));
			if (transientValues.isValueTransient(semanticObject, DroneDSLLibPackage.Literals.SECONDE_DECL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DroneDSLLibPackage.Literals.SECONDE_DECL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSecondeDeclAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSecondeDeclAccess().getValSecondeConstParserRuleCall_3_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
}
