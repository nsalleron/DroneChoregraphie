/**
 * generated by Xtext 2.12.0
 */
package fr.idmteam1.idmproject.dronedsl.generator;

import com.google.common.collect.Iterables;
import fr.idmteam1.idmproject.dronedsl.droneDSL.FonctionDecl;
import fr.idmteam1.idmproject.dronedsl.droneDSL.Import;
import fr.idmteam1.idmproject.dronedsl.droneDSL.Model;
import fr.idmteam1.idmproject.dronedsl.droneDSL.Prologue;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.generator.IOutputConfigurationProvider;
import org.eclipse.xtext.generator.OutputConfiguration;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Pair;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DroneDSLGenerator extends AbstractGenerator implements IOutputConfigurationProvider {
  private final LinkedHashMap<String, CharSequence> mainStubFilesMap = CollectionLiterals.<String, CharSequence>newLinkedHashMap(
    Pair.<String, CharSequence>of("../src/fr/roboticiens/body/BodyInstruction.java", this.contentBodyInstructionClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/Atterrir.java", this.contentAtterrirClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/Avancer.java", this.contentAvancerClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/CommandeAvecDureeVitesse.java", this.contentCommandeAvecDureeVitesseClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/CommandeBasique.java", this.contentCommandeBasiqueClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/CommandeParallelisable.java", this.contentCommandeParallelisableClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/Decoller.java", this.contentDecollerClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/Descendre.java", this.contentDescendreClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/Droite.java", this.contentDroiteClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/Gauche.java", this.contentGaucheClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/Monter.java", this.contentMonterClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/Pause.java", this.contentPauseClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/Reculer.java", this.contentReculerClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/RotationDroite.java", this.contentRotationDroiteClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/RotationGauche.java", this.contentRotationGaucheClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/imports/Import.java", this.contentImportClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/paralleles/Parallele.java", this.contentParalleleClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/prologue/Prologue.java", this.contentPrologueClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/types/Pourcent.java", this.contentPourcentClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/types/Seconde.java", this.contentSecondeClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/runtime/DroneRuntime.java", this.contentDroneRuntimeClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/runtime/DroneRuntimeExecutable.java", this.contentDroneRuntimeExecutableClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/runtime/ParrotDroneRuntime.java", this.contentDroneRuntimePrintClass()));
  
  private final LinkedHashMap<String, CharSequence> libStubFilesMap = CollectionLiterals.<String, CharSequence>newLinkedHashMap(
    Pair.<String, CharSequence>of("../src/fr/roboticiens/body/BodyInstruction.java", this.contentBodyInstructionClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/Atterrir.java", this.contentAtterrirClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/Avancer.java", this.contentAvancerClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/CommandeAvecDureeVitesse.java", this.contentCommandeAvecDureeVitesseClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/CommandeBasique.java", this.contentCommandeBasiqueClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/CommandeParallelisable.java", this.contentCommandeParallelisableClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/Decoller.java", this.contentDecollerClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/Descendre.java", this.contentDescendreClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/Droite.java", this.contentDroiteClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/Gauche.java", this.contentGaucheClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/Monter.java", this.contentMonterClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/Pause.java", this.contentPauseClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/Reculer.java", this.contentReculerClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/RotationDroite.java", this.contentRotationDroiteClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/commandes/RotationGauche.java", this.contentRotationGaucheClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/imports/Import.java", this.contentImportClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/paralleles/Parallele.java", this.contentParalleleClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/prologue/Prologue.java", this.contentPrologueClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/types/Pourcent.java", this.contentPourcentClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/types/Seconde.java", this.contentSecondeClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/runtime/DroneRuntime.java", this.contentDroneRuntimeClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/runtime/DroneRuntimeExecutable.java", this.contentDroneRuntimeExecutableClass()), 
    Pair.<String, CharSequence>of("../src/fr/roboticiens/runtime/ParrotDroneRuntime.java", this.contentDroneRuntimePrintClass()));
  
  private final String packagePath = "../src/fr/roboticiens/";
  
  private final String mainFilePath = "../src/fr/roboticiens/Main.java";
  
  @Override
  public void doGenerate(final Resource input, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    boolean _isEmpty = IterableExtensions.isEmpty(Iterables.<Model>filter(IteratorExtensions.<EObject>toIterable(input.getAllContents()), Model.class));
    boolean _not = (!_isEmpty);
    if (_not) {
      this.generateMainStubFiles(fsa);
      Iterable<Model> _filter = Iterables.<Model>filter(IteratorExtensions.<EObject>toIterable(input.getAllContents()), Model.class);
      for (final Model m : _filter) {
        fsa.generateFile(this.mainFilePath, this.compile(m));
      }
    } else {
      boolean _isEmpty_1 = IterableExtensions.isEmpty(Iterables.<fr.idmteam1.idmproject.dronedsl.droneDSLLib.Model>filter(IteratorExtensions.<EObject>toIterable(input.getAllContents()), fr.idmteam1.idmproject.dronedsl.droneDSLLib.Model.class));
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        this.generateLibStubFiles(fsa);
        Iterable<fr.idmteam1.idmproject.dronedsl.droneDSLLib.Model> _filter_1 = Iterables.<fr.idmteam1.idmproject.dronedsl.droneDSLLib.Model>filter(IteratorExtensions.<EObject>toIterable(input.getAllContents()), fr.idmteam1.idmproject.dronedsl.droneDSLLib.Model.class);
        for (final fr.idmteam1.idmproject.dronedsl.droneDSLLib.Model m_1 : _filter_1) {
          {
            final String libName = input.getURI().trimFileExtension().lastSegment();
            final String capitalizedFileName = StringExtensions.toFirstUpper(libName);
            final String filename = ((this.packagePath + capitalizedFileName) + ".java");
            fsa.generateFile(filename, this.compile(m_1));
          }
        }
      }
    }
  }
  
  public void generateMainStubFiles(final IFileSystemAccess2 fsa) {
    Iterator<Map.Entry<String, CharSequence>> itr = this.mainStubFilesMap.entrySet().iterator();
    while (itr.hasNext()) {
      {
        Map.Entry<String, CharSequence> entry = itr.next();
        String filepath = entry.getKey();
        CharSequence content = entry.getValue();
        fsa.generateFile(filepath, content);
      }
    }
  }
  
  public void generateLibStubFiles(final IFileSystemAccess2 fsa) {
    Iterator<Map.Entry<String, CharSequence>> itr = this.libStubFilesMap.entrySet().iterator();
    while (itr.hasNext()) {
      {
        Map.Entry<String, CharSequence> entry = itr.next();
        String filepath = entry.getKey();
        CharSequence content = entry.getValue();
        fsa.generateFile(filepath, content);
      }
    }
  }
  
  public CharSequence compile(final Model e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.*;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.paralleles.*;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.prologue.*;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.runtime.*;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Main {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static DroneRuntime runtime = new ParrotDroneRuntime(System.getenv(\"ROBOTICIENS_PATH\")+\"/les_roboticiens_runtime_bebop2\");");
    _builder.newLine();
    {
      Prologue _prologue = e.getPrologue();
      boolean _tripleNotEquals = (_prologue != null);
      if (_tripleNotEquals) {
        _builder.append("\t");
        String _string = e.getPrologue().toString();
        _builder.append(_string, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("runtime.start();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("runtime.execPrologue(prologue_");
    int _hashCode = e.getPrologue().hashCode();
    _builder.append(_hashCode, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _string_1 = e.getM().getDecollage().toString();
    _builder.append(_string_1, "\t\t");
    _builder.newLineIfNotEmpty();
    {
      EList<EObject> _mainbody = e.getM().getMainbody();
      for(final EObject f : _mainbody) {
        String _string_2 = f.toString();
        _builder.append(_string_2);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    String _string_3 = e.getM().getAtterrissage().toString();
    _builder.append(_string_3, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("runtime.quit();\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<FonctionDecl> _fonctions = e.getFonctions();
      boolean _tripleNotEquals_1 = (_fonctions != null);
      if (_tripleNotEquals_1) {
        {
          EList<FonctionDecl> _fonctions_1 = e.getFonctions();
          for(final FonctionDecl f_1 : _fonctions_1) {
            CharSequence _compile = this.compile(f_1);
            _builder.append(_compile);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final fr.idmteam1.idmproject.dronedsl.droneDSLLib.Model e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.*;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.paralleles.*;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.runtime.*;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.*;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("public class ");
    String _firstUpper = StringExtensions.toFirstUpper(e.eResource().getURI().trimFileExtension().lastSegment());
    _builder.append(_firstUpper);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<fr.idmteam1.idmproject.dronedsl.droneDSLLib.FonctionDecl> _fonctions = e.getFonctions();
      boolean _tripleNotEquals = (_fonctions != null);
      if (_tripleNotEquals) {
        {
          EList<fr.idmteam1.idmproject.dronedsl.droneDSLLib.FonctionDecl> _fonctions_1 = e.getFonctions();
          for(final fr.idmteam1.idmproject.dronedsl.droneDSLLib.FonctionDecl f : _fonctions_1) {
            CharSequence _compile = this.compile(f);
            _builder.append(_compile);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final FonctionDecl e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("public static void ");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append("(DroneRuntime runtime) {");
    _builder.newLineIfNotEmpty();
    {
      EList<EObject> _body = e.getBody();
      for(final EObject f : _body) {
        String _string = f.toString();
        _builder.append(_string);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence compile(final fr.idmteam1.idmproject.dronedsl.droneDSLLib.FonctionDecl e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("public static void ");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append("(DroneRuntime runtime) {");
    _builder.newLineIfNotEmpty();
    {
      EList<EObject> _body = e.getBody();
      for(final EObject f : _body) {
        String _string = f.toString();
        _builder.append(_string);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence compile(final Import e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import ");
    String _string = e.toString();
    _builder.append(_string);
    _builder.append(".java;");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence contentDroneRuntimePrintClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.runtime;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.BufferedReader;");
    _builder.newLine();
    _builder.append("import java.io.BufferedWriter;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.io.InputStream;");
    _builder.newLine();
    _builder.append("import java.io.InputStreamReader;");
    _builder.newLine();
    _builder.append("import java.io.OutputStream;");
    _builder.newLine();
    _builder.append("import java.io.OutputStreamWriter;");
    _builder.newLine();
    _builder.append("import java.lang.ProcessBuilder.Redirect;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Iterator;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Set;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.TimeUnit;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.locks.Condition;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.locks.Lock;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.locks.ReentrantLock;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.Atterrir;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.Avancer;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.CommandeAvecDureeVitesse;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.CommandeParallelisable;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.Decoller;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.Descendre;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.Droite;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.Gauche;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.Monter;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.Pause;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.Reculer;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.RotationDroite;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.RotationGauche;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.paralleles.Parallele;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.prologue.Prologue;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Pourcent;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ParrotDroneRuntime implements DroneRuntime {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final int DECOLLER_INPUT_CODE = 1;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final int ATTERRIR_INPUT_CODE = 2;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final int AVANCER_INPUT_CODE = 3;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final int RECULER_INPUT_CODE = 4;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final int MONTER_INPUT_CODE = 5;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final int DESCENDRE_INPUT_CODE = 6;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final int GAUCHE_INPUT_CODE = 7;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final int DROITE_INPUT_CODE = 8;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final int ROTATION_GAUCHE_INPUT_CODE = 9;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final int ROTATION_DROITE_INPUT_CODE = 10;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final int ELOIGNEMENT_MAX_CODE = 11;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final int HAUTEUR_MAX_CODE = 12;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final int VIT_DEPLACEMENT_MAX_CODE = 13;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final int VIT_HAUTEUR_MAX_CODE = 14;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final int VIT_ROTATION_MAX_CODE = 15;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final int QUIT = 16;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final String STATE_STARTED = \"STARTED\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final String STATE_FLYING = \"FLYING\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final String STATE_LANDED = \"LANDED\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final String STATE_STOPPED = \"STOPPED\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final int ANGLE_ROLL_PICH_MAX = 35; // degre");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final int VITESSE_VERTICAL_MAX = 6; // m/s");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final int ANGLE_ROTATION_MAX = 200; // degre");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public enum DroneState {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("STARTED, FLYING, LANDED, STOPPED");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ProcessBuilder processBuilder;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Process process;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private InputStream input;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private OutputStream output;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private BufferedReader brInput;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private BufferedWriter bwOutput;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Object bwOutputLock = new Object();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Thread printerThread;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private DroneState droneState = DroneState.STOPPED;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final Lock lockState = new ReentrantLock();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final Condition hasTakenOff = lockState.newCondition();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final Condition hasLanded = lockState.newCondition();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final Condition hasStarted = lockState.newCondition();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final Condition hasStopped = lockState.newCondition();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public  ParrotDroneRuntime(final String parrotExecutablePath) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.processBuilder = new ProcessBuilder(parrotExecutablePath);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.processBuilder.redirectError(Redirect.INHERIT);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void start(){");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("process = processBuilder.start();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.input = process.getInputStream();");
    _builder.newLine();
    _builder.append("\t\t \t");
    _builder.append("this.output = process.getOutputStream();");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t \t");
    _builder.append("this.brInput = new BufferedReader(new InputStreamReader(input));");
    _builder.newLine();
    _builder.append("\t\t \t");
    _builder.append("this.bwOutput = new BufferedWriter(new OutputStreamWriter(output));");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t \t");
    _builder.append("this.printerThread = new Thread(new Runnable() {");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String line = null;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("while((line = brInput.readLine()) != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("System.out.println(\"INPUT : \" +line);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(line.equals(STATE_STARTED)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("droneState = DroneState.STARTED;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("lockState.lock();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("hasStarted.signalAll();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("lockState.unlock();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("} else if(line.equals(STATE_FLYING)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("droneState = DroneState.FLYING;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("lockState.lock();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("hasTakenOff.signalAll();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("lockState.unlock();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("} else if(line.equals(STATE_LANDED)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("droneState = DroneState.LANDED;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("lockState.lock();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("hasLanded.signalAll();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("lockState.unlock();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("} else if(line.equals(STATE_STOPPED)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("droneState = DroneState.STOPPED;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("lockState.lock();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("hasStopped.signalAll();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("lockState.unlock();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("System.out.println(line);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} // fin while(readLine)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("this.printerThread.start();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("process.destroy();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.exit(-1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execPrologue(Prologue p) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// enregistrement des pourcentages de vitesse pour les utiliser avec le param√®tre de vitesse des mouvements");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int vitesseDeplacementMax = (int) Math.ceil((p.getVitesseDeplacement().getValue() / 100.0) * ANGLE_ROLL_PICH_MAX); //35 Max");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int vitesseVerticaleMax = (int) Math.ceil((p.getVitesseVerticale().getValue() / 100.0) * VITESSE_VERTICAL_MAX);\t//6 metres Max");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int vitesseRotationMax = (int) Math.ceil((p.getVitesseRotation().getValue() / 100.0) * ANGLE_ROTATION_MAX);\t//200 Max");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(ELOIGNEMENT_MAX_CODE, p.getEloignementMax(), true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(HAUTEUR_MAX_CODE, p.getHauteurMax(), true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(VIT_DEPLACEMENT_MAX_CODE, vitesseDeplacementMax, true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(VIT_HAUTEUR_MAX_CODE, vitesseVerticaleMax, true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(VIT_ROTATION_MAX_CODE, vitesseRotationMax, true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("process.destroy();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.exit(-1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execDecoller(Decoller d) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("lockState.lock();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(droneState == DroneState.STOPPED) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("hasStarted.await();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(DECOLLER_INPUT_CODE, 0, true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// attendre que le drone reponde qu\'il a bien decolle");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(droneState != DroneState.FLYING) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("hasTakenOff.await();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("process.destroy();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.exit(-1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("lockState.unlock();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execAtterrir(Atterrir a) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("lockState.lock();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(ATTERRIR_INPUT_CODE, 0, true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// attendre que le drone reponde qu\'il a bien atterri");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(droneState != DroneState.LANDED) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("hasLanded.await();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("process.destroy();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.exit(-1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("lockState.unlock();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execAvancer(Avancer a) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(AVANCER_INPUT_CODE, a.getVitesse().getValue(), true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Thread.sleep(a.getDuree().getValue() * 1000);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(AVANCER_INPUT_CODE, 0, true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("process.destroy();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.exit(-1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execReculer(Reculer r) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(RECULER_INPUT_CODE, r.getVitesse().getValue() , true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Thread.sleep(r.getDuree().getValue() * 1000);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(RECULER_INPUT_CODE, 0, true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("process.destroy();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.exit(-1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execMonter(Monter m) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(MONTER_INPUT_CODE, m.getVitesse().getValue(), true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Thread.sleep(m.getDuree().getValue() * 1000);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(MONTER_INPUT_CODE, 0, true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("process.destroy();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.exit(-1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execDescendre(Descendre d) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(DESCENDRE_INPUT_CODE, d.getVitesse().getValue(), true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Thread.sleep(d.getDuree().getValue() * 1000);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(DESCENDRE_INPUT_CODE, 0, true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("process.destroy();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.exit(-1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execGauche(Gauche g) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(GAUCHE_INPUT_CODE, g.getVitesse().getValue(), true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Thread.sleep(g.getDuree().getValue() * 1000);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(GAUCHE_INPUT_CODE, 0, true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("process.destroy();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.exit(-1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execDroite(Droite d) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(DROITE_INPUT_CODE, d.getVitesse().getValue(), true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Thread.sleep(d.getDuree().getValue() * 1000);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(DROITE_INPUT_CODE, 0, true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("process.destroy();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.exit(-1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execRotationGauche(RotationGauche rg) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(ROTATION_GAUCHE_INPUT_CODE, rg.getVitesse().getValue(), true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Thread.sleep(rg.getDuree().getValue() * 1000);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(ROTATION_GAUCHE_INPUT_CODE, 0, true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("process.destroy();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.exit(-1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execRotationDroite(RotationDroite rd) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(ROTATION_DROITE_INPUT_CODE, rd.getVitesse().getValue(), true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Thread.sleep(rd.getDuree().getValue() * 1000);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(ROTATION_DROITE_INPUT_CODE, 0, true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("process.destroy();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.exit(-1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execPause(Pause p) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Thread.sleep(p.getDuree().getValue() * 1000);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("process.destroy();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.exit(-1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void quit() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("lockState.lock();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeToSubProcessStdin(QUIT, 0, true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(droneState != DroneState.STOPPED) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("hasStopped.await();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("boolean terminated = process.waitFor(10, TimeUnit.SECONDS);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("printerThread.interrupt();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(!terminated) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("process.destroy();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.exit(-1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.exit(-1);;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("lockState.unlock();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execParallele(Parallele p) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<Thread> threads = new ArrayList<Thread>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Set<CommandeParallelisable> commandes = p.getCommandes();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (Iterator<CommandeParallelisable> cmdItr = commandes.iterator(); cmdItr.hasNext();) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("CommandeParallelisable commande = cmdItr.next();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(commande instanceof CommandeAvecDureeVitesse) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("CommandeAvecDureeVitesse cmdDureeVitesse = CommandeAvecDureeVitesse.class.cast(commande);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("final CommandeAvecDureeVitesse cmdSend = cmdDureeVitesse;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("final CommandeParallelisable cmdPaSend = commande;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("threads.add(new Thread(new Runnable() {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("Thread.sleep(cmdSend.getDuree().getValue() * 1000);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("synchronized(bwOutputLock) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("writeToSubProcessStdin(objToCommandeCode(cmdPaSend), 0, true);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("process.destroy();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("System.exit(-1);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}));\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (CommandeParallelisable commande : commandes) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(commande instanceof CommandeAvecDureeVitesse) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("CommandeAvecDureeVitesse cmdDureeVitesse = CommandeAvecDureeVitesse.class.cast(commande);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writeToSubProcessStdin(objToCommandeCode(commande), cmdDureeVitesse.getVitesse().getValue(), false);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bwOutput.flush();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (Thread t : threads) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("t.start();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (Thread t : threads) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("t.join();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("process.destroy();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.exit(-1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void writeToSubProcessStdin(int code, int value, boolean flush) throws IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StringBuilder sb = new StringBuilder();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sb.append(code);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sb.append(\' \');");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sb.append(value);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("bwOutput.write(sb.toString());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("bwOutput.newLine();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(flush)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bwOutput.flush();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static int objToCommandeCode(CommandeParallelisable commande) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Class<?> clazz = commande.getClass();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(clazz.equals(Avancer.class)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return AVANCER_INPUT_CODE;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if(clazz.equals(Reculer.class)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return RECULER_INPUT_CODE;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if(clazz.equals(Monter.class)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return MONTER_INPUT_CODE;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if(clazz.equals(Descendre.class)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return DESCENDRE_INPUT_CODE;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if(clazz.equals(Gauche.class)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return GAUCHE_INPUT_CODE;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if(clazz.equals(Droite.class)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return DROITE_INPUT_CODE;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if(clazz.equals(RotationGauche.class)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return ROTATION_GAUCHE_INPUT_CODE;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if(clazz.equals(RotationDroite.class)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return ROTATION_DROITE_INPUT_CODE;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentDroneRuntimeExecutableClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.runtime;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public interface DroneRuntimeExecutable {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execute(DroneRuntime droneRuntime);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentDroneRuntimeClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.runtime;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.Atterrir;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.Avancer;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.Decoller;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.Descendre;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.Droite;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.Gauche;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.Monter;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.Pause;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.Reculer;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.RotationDroite;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.RotationGauche;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.paralleles.Parallele;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.prologue.Prologue;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public interface DroneRuntime {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void start();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execPrologue(Prologue p);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execDecoller(Decoller d);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execAtterrir(Atterrir a);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execAvancer(Avancer a);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execReculer(Reculer r);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execMonter(Monter m);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execDescendre(Descendre d);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execGauche(Gauche g);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execDroite(Droite d);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execRotationGauche(RotationGauche rg);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execRotationDroite(RotationDroite rd);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execPause(Pause p);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execParallele(Parallele p);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void quit();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentSecondeClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.types;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Seconde {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final int value;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Seconde(final int value) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.value = value;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return the value");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Integer getValue() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return value;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* (non-Javadoc)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @see java.lang.Object#toString()");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"Seconde [value=\" + value + \"]\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentPourcentClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.types;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Pourcent {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final int value;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Pourcent(final int value) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.value = value;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return the value");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Integer getValue() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return value;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* (non-Javadoc)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @see java.lang.Object#toString()");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"Pourcent [value=\" + value + \"]\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentPrologueClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.prologue;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Pourcent;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.runtime.DroneRuntime;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.runtime.DroneRuntimeExecutable;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Prologue implements DroneRuntimeExecutable {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final Pourcent vitesseVerticale;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final Pourcent vitesseDeplacement;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final Pourcent vitesseRotation;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final int hauteurMax;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final int eloignementMax;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Prologue(final Pourcent vitesseVerticale, final Pourcent vitesseDeplacement, ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("final Pourcent vitesseRotation, final int hauteurMax, final int eloignementMax) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.vitesseVerticale = vitesseVerticale;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.vitesseDeplacement = vitesseDeplacement;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.vitesseRotation = vitesseRotation;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.hauteurMax = hauteurMax;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.eloignementMax = eloignementMax;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return the vitesseVerticale");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Pourcent getVitesseVerticale() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return vitesseVerticale;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return the vitesseDeplacement");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Pourcent getVitesseDeplacement() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return vitesseDeplacement;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return the vitesseRotation");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Pourcent getVitesseRotation() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return vitesseRotation;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return the hauteurMax");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getHauteurMax() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return hauteurMax;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return the eloignementMax");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getEloignementMax() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return eloignementMax;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execute(DroneRuntime droneRuntime) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("droneRuntime.execPrologue(this);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* (non-Javadoc)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @see java.lang.Object#toString()");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"Prologue [vitesseVerticale=\" + vitesseVerticale + \", vitesseDeplacement=\" + vitesseDeplacement + \", vitesseRotation=\" + vitesseRotation + \", hauteurMax=\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ hauteurMax + \", eloignementMax=\" + eloignementMax + \"]\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentParalleleClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.paralleles;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.HashSet;");
    _builder.newLine();
    _builder.append("import java.util.Set;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.body.BodyInstruction;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.commandes.CommandeParallelisable;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.runtime.DroneRuntime;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Parallele implements BodyInstruction {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Set<CommandeParallelisable> commandes;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Parallele() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.commandes = new HashSet<CommandeParallelisable>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean addCommande(final CommandeParallelisable cp) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return commandes.add(cp);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return the commandes");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Set<CommandeParallelisable> getCommandes() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return commandes;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execute(DroneRuntime droneRuntime) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("droneRuntime.execParallele(this);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String tmp = \"Parallele\" + commandes.size() + \" [\\n\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (CommandeParallelisable e : commandes) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tmp += \"\\t\" + e.toString() + \"\\n\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("tmp += \"]\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return tmp;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentImportClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.imports;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Import {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final String filename;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Import(final String filename) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.filename = filename;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return the filename");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getFilename() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return filename;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentRotationGaucheClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.commandes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Pourcent;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Seconde;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.runtime.DroneRuntime;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class RotationGauche extends CommandeAvecDureeVitesse implements CommandeBasique, CommandeParallelisable {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public RotationGauche(final Seconde duree, final Pourcent vitesse) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(duree, vitesse);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execute(DroneRuntime droneRuntime) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("droneRuntime.execRotationGauche(this);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* (non-Javadoc)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @see java.lang.Object#toString()");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"RotationGauche [duree=\" + duree + \", vitesse=\" + vitesse + \"]\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentRotationDroiteClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.commandes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Pourcent;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Seconde;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.runtime.DroneRuntime;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class RotationDroite extends CommandeAvecDureeVitesse implements CommandeBasique, CommandeParallelisable {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public RotationDroite(final Seconde duree, final Pourcent vitesse) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(duree, vitesse);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execute(DroneRuntime droneRuntime) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("droneRuntime.execRotationDroite(this);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* (non-Javadoc)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @see java.lang.Object#toString()");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"RotationDroite [duree=\" + duree + \", vitesse=\" + vitesse + \"]\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentReculerClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.commandes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Pourcent;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Seconde;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.runtime.DroneRuntime;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Reculer extends CommandeAvecDureeVitesse implements CommandeBasique, CommandeParallelisable {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Reculer(final Seconde duree, final Pourcent vitesse) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(duree, vitesse);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execute(DroneRuntime droneRuntime) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("droneRuntime.execReculer(this);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* (non-Javadoc)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @see java.lang.Object#toString()");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"Reculer [duree=\" + duree + \", vitesse=\" + vitesse + \"]\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentPauseClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.commandes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Seconde;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.runtime.DroneRuntime;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Pause implements CommandeBasique {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected final Seconde duree;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Pause(final Seconde duree) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.duree = duree;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return the duree");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Seconde getDuree() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return duree;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execute(DroneRuntime droneRuntime) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("droneRuntime.execPause(this);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* (non-Javadoc)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @see java.lang.Object#toString()");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"Pause [duree=\" + duree + \"]\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentMonterClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.commandes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Pourcent;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Seconde;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.runtime.DroneRuntime;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Monter extends CommandeAvecDureeVitesse implements CommandeBasique, CommandeParallelisable {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Monter(final Seconde duree, final Pourcent vitesse) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(duree, vitesse);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execute(DroneRuntime droneRuntime) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("droneRuntime.execMonter(this);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* (non-Javadoc)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @see java.lang.Object#toString()");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"Monter [duree=\" + duree + \", vitesse=\" + vitesse + \"]\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentGaucheClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.commandes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Pourcent;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Seconde;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.runtime.DroneRuntime;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Gauche extends CommandeAvecDureeVitesse implements CommandeBasique, CommandeParallelisable {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Gauche(final Seconde duree, final Pourcent vitesse) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(duree, vitesse);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execute(DroneRuntime droneRuntime) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("droneRuntime.execGauche(this);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* (non-Javadoc)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @see java.lang.Object#toString()");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"Gauche [duree=\" + duree + \", vitesse=\" + vitesse + \"]\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentDroiteClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.commandes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Pourcent;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Seconde;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.runtime.DroneRuntime;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Droite extends CommandeAvecDureeVitesse implements CommandeBasique, CommandeParallelisable {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Droite(final Seconde duree, final Pourcent vitesse) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(duree, vitesse);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execute(DroneRuntime droneRuntime) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("droneRuntime.execDroite(this);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* (non-Javadoc)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @see java.lang.Object#toString()");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"Droite [duree=\" + duree + \", vitesse=\" + vitesse + \"]\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentDescendreClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.commandes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Pourcent;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Seconde;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.runtime.DroneRuntime;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Descendre extends CommandeAvecDureeVitesse implements CommandeBasique, CommandeParallelisable {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Descendre(final Seconde duree, final Pourcent vitesse) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(duree, vitesse);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execute(DroneRuntime droneRuntime) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("droneRuntime.execDescendre(this);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* (non-Javadoc)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @see java.lang.Object#toString()");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"Descendre [duree=\" + duree + \", vitesse=\" + vitesse + \"]\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentDecollerClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.commandes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.runtime.DroneRuntime;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Decoller implements CommandeBasique {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execute(DroneRuntime droneRuntime) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("droneRuntime.execDecoller(this);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* (non-Javadoc)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @see java.lang.Object#toString()");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"Decoller []\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentCommandeParallelisableClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.commandes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public interface CommandeParallelisable {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentCommandeBasiqueClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.commandes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.body.BodyInstruction;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public interface CommandeBasique extends BodyInstruction {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentCommandeAvecDureeVitesseClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.commandes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Pourcent;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Seconde;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class CommandeAvecDureeVitesse {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected final Seconde duree;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected final Pourcent vitesse;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public CommandeAvecDureeVitesse(final Seconde duree, final Pourcent vitesse) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.duree = duree;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.vitesse = vitesse;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return the duree");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Seconde getDuree() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return duree;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return the vitesse");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Pourcent getVitesse() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return vitesse;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentAvancerClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.commandes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Pourcent;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.types.Seconde;");
    _builder.newLine();
    _builder.append("import fr.roboticiens.runtime.DroneRuntime;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Avancer extends CommandeAvecDureeVitesse implements CommandeBasique, CommandeParallelisable {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Avancer(final Seconde duree, final Pourcent vitesse) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(duree, vitesse);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execute(DroneRuntime droneRuntime) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("droneRuntime.execAvancer(this);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* (non-Javadoc)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @see java.lang.Object#toString()");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"Avancer [duree=\" + duree + \", vitesse=\" + vitesse + \"]\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentAtterrirClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.commandes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.runtime.DroneRuntime;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Atterrir implements CommandeBasique {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execute(DroneRuntime droneRuntime) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("droneRuntime.execAtterrir(this);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* (non-Javadoc)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @see java.lang.Object#toString()");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"Atterrir []\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentBodyInstructionClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package fr.roboticiens.body;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import fr.roboticiens.runtime.DroneRuntimeExecutable;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public interface BodyInstruction extends DroneRuntimeExecutable {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  @Override
  public Set<OutputConfiguration> getOutputConfigurations() {
    OutputConfiguration defaultOutput = new OutputConfiguration(IFileSystemAccess.DEFAULT_OUTPUT);
    defaultOutput.setDescription("Output Folder");
    defaultOutput.setOutputDirectory("./srcTEST");
    defaultOutput.setOverrideExistingResources(true);
    defaultOutput.setCreateOutputDirectory(false);
    defaultOutput.setCleanUpDerivedResources(true);
    defaultOutput.setSetDerivedProperty(true);
    HashSet<OutputConfiguration> configurations = new HashSet<OutputConfiguration>();
    configurations.add(defaultOutput);
    return configurations;
  }
}
