/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.idm_project.Avancer;
import org.xtext.example.mydsl.idm_project.Descendre;
import org.xtext.example.mydsl.idm_project.Droite;
import org.xtext.example.mydsl.idm_project.Eloignement_max;
import org.xtext.example.mydsl.idm_project.FonctionCall;
import org.xtext.example.mydsl.idm_project.FonctionDecl;
import org.xtext.example.mydsl.idm_project.Gauche;
import org.xtext.example.mydsl.idm_project.Hauteur_max;
import org.xtext.example.mydsl.idm_project.Idm_projectPackage;
import org.xtext.example.mydsl.idm_project.Import;
import org.xtext.example.mydsl.idm_project.Imports;
import org.xtext.example.mydsl.idm_project.IntConstante;
import org.xtext.example.mydsl.idm_project.IntDecl;
import org.xtext.example.mydsl.idm_project.Main;
import org.xtext.example.mydsl.idm_project.Model;
import org.xtext.example.mydsl.idm_project.Monter;
import org.xtext.example.mydsl.idm_project.Parallele2;
import org.xtext.example.mydsl.idm_project.Parallele3;
import org.xtext.example.mydsl.idm_project.Pause;
import org.xtext.example.mydsl.idm_project.PourcentConst;
import org.xtext.example.mydsl.idm_project.PourcentDecl;
import org.xtext.example.mydsl.idm_project.Pourcent_vitesse_deplacement_max;
import org.xtext.example.mydsl.idm_project.Pourcent_vitesse_hauteur_max;
import org.xtext.example.mydsl.idm_project.Pourcent_vitesse_rotation_max;
import org.xtext.example.mydsl.idm_project.Reculer;
import org.xtext.example.mydsl.idm_project.RefIntVar;
import org.xtext.example.mydsl.idm_project.RefPourcentVar;
import org.xtext.example.mydsl.idm_project.RotationDroite;
import org.xtext.example.mydsl.idm_project.RotationGauche;
import org.xtext.example.mydsl.services.IDMProjectGrammarAccess;

@SuppressWarnings("all")
public class IDMProjectSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private IDMProjectGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Idm_projectPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Idm_projectPackage.AVANCER:
				sequence_Avancer(context, (Avancer) semanticObject); 
				return; 
			case Idm_projectPackage.DESCENDRE:
				sequence_Descendre(context, (Descendre) semanticObject); 
				return; 
			case Idm_projectPackage.DROITE:
				sequence_Droite(context, (Droite) semanticObject); 
				return; 
			case Idm_projectPackage.ELOIGNEMENT_MAX:
				sequence_Eloignement_max(context, (Eloignement_max) semanticObject); 
				return; 
			case Idm_projectPackage.FONCTION_CALL:
				sequence_FonctionCall(context, (FonctionCall) semanticObject); 
				return; 
			case Idm_projectPackage.FONCTION_DECL:
				sequence_FonctionDecl(context, (FonctionDecl) semanticObject); 
				return; 
			case Idm_projectPackage.GAUCHE:
				sequence_Gauche(context, (Gauche) semanticObject); 
				return; 
			case Idm_projectPackage.HAUTEUR_MAX:
				sequence_Hauteur_max(context, (Hauteur_max) semanticObject); 
				return; 
			case Idm_projectPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case Idm_projectPackage.IMPORTS:
				sequence_Imports(context, (Imports) semanticObject); 
				return; 
			case Idm_projectPackage.INT_CONSTANTE:
				sequence_IntConstante(context, (IntConstante) semanticObject); 
				return; 
			case Idm_projectPackage.INT_DECL:
				sequence_IntDecl(context, (IntDecl) semanticObject); 
				return; 
			case Idm_projectPackage.MAIN:
				sequence_Main(context, (Main) semanticObject); 
				return; 
			case Idm_projectPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case Idm_projectPackage.MONTER:
				sequence_Monter(context, (Monter) semanticObject); 
				return; 
			case Idm_projectPackage.PARALLELE2:
				sequence_Parallele2(context, (Parallele2) semanticObject); 
				return; 
			case Idm_projectPackage.PARALLELE3:
				sequence_Parallele3(context, (Parallele3) semanticObject); 
				return; 
			case Idm_projectPackage.PAUSE:
				sequence_Pause(context, (Pause) semanticObject); 
				return; 
			case Idm_projectPackage.POURCENT_CONST:
				sequence_PourcentConst(context, (PourcentConst) semanticObject); 
				return; 
			case Idm_projectPackage.POURCENT_DECL:
				sequence_PourcentDecl(context, (PourcentDecl) semanticObject); 
				return; 
			case Idm_projectPackage.POURCENT_VITESSE_DEPLACEMENT_MAX:
				sequence_Pourcent_vitesse_deplacement_max(context, (Pourcent_vitesse_deplacement_max) semanticObject); 
				return; 
			case Idm_projectPackage.POURCENT_VITESSE_HAUTEUR_MAX:
				sequence_Pourcent_vitesse_hauteur_max(context, (Pourcent_vitesse_hauteur_max) semanticObject); 
				return; 
			case Idm_projectPackage.POURCENT_VITESSE_ROTATION_MAX:
				sequence_Pourcent_vitesse_rotation_max(context, (Pourcent_vitesse_rotation_max) semanticObject); 
				return; 
			case Idm_projectPackage.RECULER:
				sequence_Reculer(context, (Reculer) semanticObject); 
				return; 
			case Idm_projectPackage.REF_INT_VAR:
				sequence_RefIntVar(context, (RefIntVar) semanticObject); 
				return; 
			case Idm_projectPackage.REF_POURCENT_VAR:
				sequence_RefPourcentVar(context, (RefPourcentVar) semanticObject); 
				return; 
			case Idm_projectPackage.ROTATION_DROITE:
				sequence_RotationDroite(context, (RotationDroite) semanticObject); 
				return; 
			case Idm_projectPackage.ROTATION_GAUCHE:
				sequence_RotationGauche(context, (RotationGauche) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Avancer returns Avancer
	 *     Statement returns Avancer
	 *     AR returns Avancer
	 *
	 * Constraint:
	 *     (duree=IntExp vitesse_deplacement=PourcentExp)
	 */
	protected void sequence_Avancer(ISerializationContext context, Avancer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.AVANCER__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.AVANCER__DUREE));
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.AVANCER__VITESSE_DEPLACEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.AVANCER__VITESSE_DEPLACEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAvancerAccess().getDureeIntExpParserRuleCall_2_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getAvancerAccess().getVitesse_deplacementPourcentExpParserRuleCall_4_0(), semanticObject.getVitesse_deplacement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Descendre returns Descendre
	 *     Statement returns Descendre
	 *     MD returns Descendre
	 *
	 * Constraint:
	 *     (duree=IntExp vitesse_verticale=PourcentExp)
	 */
	protected void sequence_Descendre(ISerializationContext context, Descendre semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.DESCENDRE__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.DESCENDRE__DUREE));
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.DESCENDRE__VITESSE_VERTICALE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.DESCENDRE__VITESSE_VERTICALE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDescendreAccess().getDureeIntExpParserRuleCall_2_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getDescendreAccess().getVitesse_verticalePourcentExpParserRuleCall_4_0(), semanticObject.getVitesse_verticale());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Droite returns Droite
	 *     Statement returns Droite
	 *     GDr returns Droite
	 *
	 * Constraint:
	 *     (duree=IntExp vitesse_deplacement=PourcentExp)
	 */
	protected void sequence_Droite(ISerializationContext context, Droite semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.DROITE__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.DROITE__DUREE));
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.DROITE__VITESSE_DEPLACEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.DROITE__VITESSE_DEPLACEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDroiteAccess().getDureeIntExpParserRuleCall_2_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getDroiteAccess().getVitesse_deplacementPourcentExpParserRuleCall_4_0(), semanticObject.getVitesse_deplacement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Eloignement_max returns Eloignement_max
	 *
	 * Constraint:
	 *     hauteur_max=IntExp
	 */
	protected void sequence_Eloignement_max(ISerializationContext context, Eloignement_max semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.ELOIGNEMENT_MAX__HAUTEUR_MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.ELOIGNEMENT_MAX__HAUTEUR_MAX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEloignement_maxAccess().getHauteur_maxIntExpParserRuleCall_2_0(), semanticObject.getHauteur_max());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FonctionCall returns FonctionCall
	 *
	 * Constraint:
	 *     func=[FonctionDecl|ID]
	 */
	protected void sequence_FonctionCall(ISerializationContext context, FonctionCall semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.FONCTION_CALL__FUNC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.FONCTION_CALL__FUNC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFonctionCallAccess().getFuncFonctionDeclIDTerminalRuleCall_0_0_1(), semanticObject.eGet(Idm_projectPackage.Literals.FONCTION_CALL__FUNC, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FonctionDecl returns FonctionDecl
	 *
	 * Constraint:
	 *     (name=ID body+=Statement*)
	 */
	protected void sequence_FonctionDecl(ISerializationContext context, FonctionDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Gauche returns Gauche
	 *     Statement returns Gauche
	 *     GDr returns Gauche
	 *
	 * Constraint:
	 *     (duree=IntExp vitesse_deplacement=PourcentExp)
	 */
	protected void sequence_Gauche(ISerializationContext context, Gauche semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.GAUCHE__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.GAUCHE__DUREE));
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.GAUCHE__VITESSE_DEPLACEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.GAUCHE__VITESSE_DEPLACEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGaucheAccess().getDureeIntExpParserRuleCall_2_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getGaucheAccess().getVitesse_deplacementPourcentExpParserRuleCall_4_0(), semanticObject.getVitesse_deplacement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Hauteur_max returns Hauteur_max
	 *
	 * Constraint:
	 *     hauteur_max=IntExp
	 */
	protected void sequence_Hauteur_max(ISerializationContext context, Hauteur_max semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.HAUTEUR_MAX__HAUTEUR_MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.HAUTEUR_MAX__HAUTEUR_MAX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHauteur_maxAccess().getHauteur_maxIntExpParserRuleCall_2_0(), semanticObject.getHauteur_max());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     importURI=INCLUDE
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.IMPORT__IMPORT_URI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.IMPORT__IMPORT_URI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getImportURIINCLUDETerminalRuleCall_2_0(), semanticObject.getImportURI());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Imports returns Imports
	 *
	 * Constraint:
	 *     includes+=Import
	 */
	protected void sequence_Imports(ISerializationContext context, Imports semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IntConstante returns IntConstante
	 *     IntExp returns IntConstante
	 *
	 * Constraint:
	 *     val=INT
	 */
	protected void sequence_IntConstante(ISerializationContext context, IntConstante semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.INT_CONSTANTE__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.INT_CONSTANTE__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntConstanteAccess().getValINTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IntDecl returns IntDecl
	 *
	 * Constraint:
	 *     (name=ID val=IntExp)
	 */
	protected void sequence_IntDecl(ISerializationContext context, IntDecl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.INT_DECL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.INT_DECL__NAME));
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.INT_DECL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.INT_DECL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntDeclAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getIntDeclAccess().getValIntExpParserRuleCall_3_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Main returns Main
	 *
	 * Constraint:
	 *     (
	 *         SeconDec+=IntDecl | 
	 *         PourDec+=PourcentDecl | 
	 *         statements+=Statement | 
	 *         fonctions+=FonctionCall | 
	 *         parallele+=Parallele2 | 
	 *         parallele+=Parallele3
	 *     )+
	 */
	protected void sequence_Main(ISerializationContext context, Main semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (
	 *         imports+=Import* 
	 *         pvhm+=Pourcent_vitesse_hauteur_max 
	 *         pvdm+=Pourcent_vitesse_deplacement_max 
	 *         pvrm+=Pourcent_vitesse_rotation_max 
	 *         hm+=Hauteur_max 
	 *         em+=Eloignement_max 
	 *         m=Main 
	 *         fonctions+=FonctionDecl*
	 *     )
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Monter returns Monter
	 *     Statement returns Monter
	 *     MD returns Monter
	 *
	 * Constraint:
	 *     (duree=IntExp vitesse_verticale=PourcentExp)
	 */
	protected void sequence_Monter(ISerializationContext context, Monter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.MONTER__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.MONTER__DUREE));
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.MONTER__VITESSE_VERTICALE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.MONTER__VITESSE_VERTICALE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMonterAccess().getDureeIntExpParserRuleCall_2_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getMonterAccess().getVitesse_verticalePourcentExpParserRuleCall_4_0(), semanticObject.getVitesse_verticale());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parallele2 returns Parallele2
	 *
	 * Constraint:
	 *     (
	 *         (a=MD t=GDr) | 
	 *         (a=MD t=AR) | 
	 *         (a=MD t=RGRD) | 
	 *         (t=GDr b=AR) | 
	 *         (t=GDr b=MD) | 
	 *         (t=GDr b=RGRD) | 
	 *         (t=RGRD a=MD) | 
	 *         (t=RGRD a=AR) | 
	 *         (t=RGRD a=GDr) | 
	 *         (t=AR a=MD) | 
	 *         (t=AR a=RGRD) | 
	 *         (t=AR a=GDr)
	 *     )
	 */
	protected void sequence_Parallele2(ISerializationContext context, Parallele2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parallele3 returns Parallele3
	 *
	 * Constraint:
	 *     (
	 *         (a=AR b=GDr c=MD) | 
	 *         (a=AR b=GDr c=RGRD) | 
	 *         (a=AR b=MD c=GDr) | 
	 *         (a=AR b=MD c=RGRD) | 
	 *         (a=AR b=RGRD c=MD) | 
	 *         (a=AR b=RGRD c=GDr) | 
	 *         (a=GDr b=AR c=MD) | 
	 *         (a=GDr b=AR c=RGRD) | 
	 *         (a=GDr b=MD c=AR) | 
	 *         (a=GDr b=MD c=RGRD) | 
	 *         (a=GDr b=RGRD c=AR) | 
	 *         (a=GDr b=RGRD c=MD) | 
	 *         (a=MD b=AR c=GDr) | 
	 *         (a=MD b=AR c=RGRD) | 
	 *         (a=MD b=GDr c=AR) | 
	 *         (a=MD b=GDr c=RGRD) | 
	 *         (a=MD b=RGRD c=GDr) | 
	 *         (a=MD b=RGRD c=AR) | 
	 *         (a=RGRD b=AR c=MD) | 
	 *         (a=RGRD b=AR c=GDr) | 
	 *         (a=RGRD b=MD c=AR) | 
	 *         (a=RGRD b=MD c=GDr) | 
	 *         (a=RGRD b=GDr c=MD) | 
	 *         (a=RGRD b=GDr c=AR)
	 *     )
	 */
	protected void sequence_Parallele3(ISerializationContext context, Parallele3 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Pause returns Pause
	 *     Statement returns Pause
	 *
	 * Constraint:
	 *     duree=IntExp
	 */
	protected void sequence_Pause(ISerializationContext context, Pause semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.PAUSE__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.PAUSE__DUREE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPauseAccess().getDureeIntExpParserRuleCall_2_0(), semanticObject.getDuree());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PourcentConst returns PourcentConst
	 *     PourcentExp returns PourcentConst
	 *
	 * Constraint:
	 *     val=POURCENT
	 */
	protected void sequence_PourcentConst(ISerializationContext context, PourcentConst semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.POURCENT_CONST__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.POURCENT_CONST__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPourcentConstAccess().getValPOURCENTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PourcentDecl returns PourcentDecl
	 *
	 * Constraint:
	 *     (name=ID val=PourcentConst)
	 */
	protected void sequence_PourcentDecl(ISerializationContext context, PourcentDecl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.POURCENT_DECL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.POURCENT_DECL__NAME));
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.POURCENT_DECL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.POURCENT_DECL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPourcentDeclAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPourcentDeclAccess().getValPourcentConstParserRuleCall_3_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Pourcent_vitesse_deplacement_max returns Pourcent_vitesse_deplacement_max
	 *
	 * Constraint:
	 *     vitesse_deplacement=PourcentConst
	 */
	protected void sequence_Pourcent_vitesse_deplacement_max(ISerializationContext context, Pourcent_vitesse_deplacement_max semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.POURCENT_VITESSE_DEPLACEMENT_MAX__VITESSE_DEPLACEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.POURCENT_VITESSE_DEPLACEMENT_MAX__VITESSE_DEPLACEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPourcent_vitesse_deplacement_maxAccess().getVitesse_deplacementPourcentConstParserRuleCall_2_0(), semanticObject.getVitesse_deplacement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Pourcent_vitesse_hauteur_max returns Pourcent_vitesse_hauteur_max
	 *
	 * Constraint:
	 *     vitesse_verticale=PourcentConst
	 */
	protected void sequence_Pourcent_vitesse_hauteur_max(ISerializationContext context, Pourcent_vitesse_hauteur_max semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.POURCENT_VITESSE_HAUTEUR_MAX__VITESSE_VERTICALE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.POURCENT_VITESSE_HAUTEUR_MAX__VITESSE_VERTICALE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPourcent_vitesse_hauteur_maxAccess().getVitesse_verticalePourcentConstParserRuleCall_2_0(), semanticObject.getVitesse_verticale());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Pourcent_vitesse_rotation_max returns Pourcent_vitesse_rotation_max
	 *
	 * Constraint:
	 *     vitesse_deplacement=PourcentConst
	 */
	protected void sequence_Pourcent_vitesse_rotation_max(ISerializationContext context, Pourcent_vitesse_rotation_max semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.POURCENT_VITESSE_ROTATION_MAX__VITESSE_DEPLACEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.POURCENT_VITESSE_ROTATION_MAX__VITESSE_DEPLACEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPourcent_vitesse_rotation_maxAccess().getVitesse_deplacementPourcentConstParserRuleCall_2_0(), semanticObject.getVitesse_deplacement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Reculer returns Reculer
	 *     Statement returns Reculer
	 *     AR returns Reculer
	 *
	 * Constraint:
	 *     (duree=IntExp vitesse_deplacement=PourcentExp)
	 */
	protected void sequence_Reculer(ISerializationContext context, Reculer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.RECULER__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.RECULER__DUREE));
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.RECULER__VITESSE_DEPLACEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.RECULER__VITESSE_DEPLACEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReculerAccess().getDureeIntExpParserRuleCall_2_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getReculerAccess().getVitesse_deplacementPourcentExpParserRuleCall_4_0(), semanticObject.getVitesse_deplacement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RefIntVar returns RefIntVar
	 *     IntExp returns RefIntVar
	 *
	 * Constraint:
	 *     var=[IntDecl|ID]
	 */
	protected void sequence_RefIntVar(ISerializationContext context, RefIntVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.REF_INT_VAR__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.REF_INT_VAR__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefIntVarAccess().getVarIntDeclIDTerminalRuleCall_0_1(), semanticObject.eGet(Idm_projectPackage.Literals.REF_INT_VAR__VAR, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PourcentExp returns RefPourcentVar
	 *     RefPourcentVar returns RefPourcentVar
	 *
	 * Constraint:
	 *     var=[PourcentDecl|ID]
	 */
	protected void sequence_RefPourcentVar(ISerializationContext context, RefPourcentVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.REF_POURCENT_VAR__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.REF_POURCENT_VAR__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefPourcentVarAccess().getVarPourcentDeclIDTerminalRuleCall_0_1(), semanticObject.eGet(Idm_projectPackage.Literals.REF_POURCENT_VAR__VAR, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RotationDroite returns RotationDroite
	 *     Statement returns RotationDroite
	 *     RGRD returns RotationDroite
	 *
	 * Constraint:
	 *     (duree=IntExp vitesse_rotation=PourcentExp)
	 */
	protected void sequence_RotationDroite(ISerializationContext context, RotationDroite semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.ROTATION_DROITE__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.ROTATION_DROITE__DUREE));
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.ROTATION_DROITE__VITESSE_ROTATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.ROTATION_DROITE__VITESSE_ROTATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRotationDroiteAccess().getDureeIntExpParserRuleCall_2_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getRotationDroiteAccess().getVitesse_rotationPourcentExpParserRuleCall_4_0(), semanticObject.getVitesse_rotation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RotationGauche returns RotationGauche
	 *     Statement returns RotationGauche
	 *     RGRD returns RotationGauche
	 *
	 * Constraint:
	 *     (duree=IntExp vitesse_rotation=PourcentExp)
	 */
	protected void sequence_RotationGauche(ISerializationContext context, RotationGauche semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.ROTATION_GAUCHE__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.ROTATION_GAUCHE__DUREE));
			if (transientValues.isValueTransient(semanticObject, Idm_projectPackage.Literals.ROTATION_GAUCHE__VITESSE_ROTATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Idm_projectPackage.Literals.ROTATION_GAUCHE__VITESSE_ROTATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRotationGaucheAccess().getDureeIntExpParserRuleCall_2_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getRotationGaucheAccess().getVitesse_rotationPourcentExpParserRuleCall_4_0(), semanticObject.getVitesse_rotation());
		feeder.finish();
	}
	
	
}
