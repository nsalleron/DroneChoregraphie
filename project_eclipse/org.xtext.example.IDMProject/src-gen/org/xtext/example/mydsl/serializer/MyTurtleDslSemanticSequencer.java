/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myTurtleDsl.Avancer;
import org.xtext.example.mydsl.myTurtleDsl.Descendre;
import org.xtext.example.mydsl.myTurtleDsl.Droite;
import org.xtext.example.mydsl.myTurtleDsl.FonctionCall;
import org.xtext.example.mydsl.myTurtleDsl.FonctionDecl;
import org.xtext.example.mydsl.myTurtleDsl.Gauche;
import org.xtext.example.mydsl.myTurtleDsl.Includes;
import org.xtext.example.mydsl.myTurtleDsl.IntConstante;
import org.xtext.example.mydsl.myTurtleDsl.IntDecl;
import org.xtext.example.mydsl.myTurtleDsl.Model;
import org.xtext.example.mydsl.myTurtleDsl.Monter;
import org.xtext.example.mydsl.myTurtleDsl.MyTurtleDslPackage;
import org.xtext.example.mydsl.myTurtleDsl.Parallele2;
import org.xtext.example.mydsl.myTurtleDsl.Parallele3;
import org.xtext.example.mydsl.myTurtleDsl.Pause;
import org.xtext.example.mydsl.myTurtleDsl.PourcentDecl;
import org.xtext.example.mydsl.myTurtleDsl.Reculer;
import org.xtext.example.mydsl.myTurtleDsl.RefIntVar;
import org.xtext.example.mydsl.myTurtleDsl.RotationDroite;
import org.xtext.example.mydsl.myTurtleDsl.RotationGauche;
import org.xtext.example.mydsl.services.MyTurtleDslGrammarAccess;

@SuppressWarnings("all")
public class MyTurtleDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyTurtleDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyTurtleDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyTurtleDslPackage.AVANCER:
				sequence_Avancer(context, (Avancer) semanticObject); 
				return; 
			case MyTurtleDslPackage.DESCENDRE:
				sequence_Descendre(context, (Descendre) semanticObject); 
				return; 
			case MyTurtleDslPackage.DROITE:
				sequence_Droite(context, (Droite) semanticObject); 
				return; 
			case MyTurtleDslPackage.FONCTION_CALL:
				sequence_FonctionCall(context, (FonctionCall) semanticObject); 
				return; 
			case MyTurtleDslPackage.FONCTION_DECL:
				sequence_FonctionDecl(context, (FonctionDecl) semanticObject); 
				return; 
			case MyTurtleDslPackage.GAUCHE:
				sequence_Gauche(context, (Gauche) semanticObject); 
				return; 
			case MyTurtleDslPackage.INCLUDES:
				sequence_Includes(context, (Includes) semanticObject); 
				return; 
			case MyTurtleDslPackage.INT_CONSTANTE:
				sequence_IntConstante(context, (IntConstante) semanticObject); 
				return; 
			case MyTurtleDslPackage.INT_DECL:
				sequence_IntDecl(context, (IntDecl) semanticObject); 
				return; 
			case MyTurtleDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyTurtleDslPackage.MONTER:
				sequence_Monter(context, (Monter) semanticObject); 
				return; 
			case MyTurtleDslPackage.PARALLELE2:
				sequence_Parallele2(context, (Parallele2) semanticObject); 
				return; 
			case MyTurtleDslPackage.PARALLELE3:
				sequence_Parallele3(context, (Parallele3) semanticObject); 
				return; 
			case MyTurtleDslPackage.PAUSE:
				sequence_Pause(context, (Pause) semanticObject); 
				return; 
			case MyTurtleDslPackage.POURCENT_DECL:
				sequence_PourcentDecl(context, (PourcentDecl) semanticObject); 
				return; 
			case MyTurtleDslPackage.RECULER:
				sequence_Reculer(context, (Reculer) semanticObject); 
				return; 
			case MyTurtleDslPackage.REF_INT_VAR:
				sequence_RefIntVar(context, (RefIntVar) semanticObject); 
				return; 
			case MyTurtleDslPackage.ROTATION_DROITE:
				sequence_RotationDroite(context, (RotationDroite) semanticObject); 
				return; 
			case MyTurtleDslPackage.ROTATION_GAUCHE:
				sequence_RotationGauche(context, (RotationGauche) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AR returns Avancer
	 *     Avancer returns Avancer
	 *     Statement returns Avancer
	 *
	 * Constraint:
	 *     (duree=IntExp vitesse_deplacement=IntExp)
	 */
	protected void sequence_Avancer(ISerializationContext context, Avancer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.AVANCER__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.AVANCER__DUREE));
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.AVANCER__VITESSE_DEPLACEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.AVANCER__VITESSE_DEPLACEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAvancerAccess().getDureeIntExpParserRuleCall_2_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getAvancerAccess().getVitesse_deplacementIntExpParserRuleCall_4_0(), semanticObject.getVitesse_deplacement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MD returns Descendre
	 *     Descendre returns Descendre
	 *     Statement returns Descendre
	 *
	 * Constraint:
	 *     (duree=IntExp vitesse_verticale=IntExp)
	 */
	protected void sequence_Descendre(ISerializationContext context, Descendre semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.DESCENDRE__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.DESCENDRE__DUREE));
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.DESCENDRE__VITESSE_VERTICALE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.DESCENDRE__VITESSE_VERTICALE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDescendreAccess().getDureeIntExpParserRuleCall_2_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getDescendreAccess().getVitesse_verticaleIntExpParserRuleCall_4_0(), semanticObject.getVitesse_verticale());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GDr returns Droite
	 *     Droite returns Droite
	 *     Statement returns Droite
	 *
	 * Constraint:
	 *     (duree=IntExp vitesse_deplacement=IntExp)
	 */
	protected void sequence_Droite(ISerializationContext context, Droite semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.DROITE__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.DROITE__DUREE));
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.DROITE__VITESSE_DEPLACEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.DROITE__VITESSE_DEPLACEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDroiteAccess().getDureeIntExpParserRuleCall_2_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getDroiteAccess().getVitesse_deplacementIntExpParserRuleCall_4_0(), semanticObject.getVitesse_deplacement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FonctionCall returns FonctionCall
	 *
	 * Constraint:
	 *     func=[FonctionDecl|ID]
	 */
	protected void sequence_FonctionCall(ISerializationContext context, FonctionCall semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.FONCTION_CALL__FUNC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.FONCTION_CALL__FUNC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFonctionCallAccess().getFuncFonctionDeclIDTerminalRuleCall_0_0_1(), semanticObject.eGet(MyTurtleDslPackage.Literals.FONCTION_CALL__FUNC, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FonctionDecl returns FonctionDecl
	 *
	 * Constraint:
	 *     (name=ID body+=Statement*)
	 */
	protected void sequence_FonctionDecl(ISerializationContext context, FonctionDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GDr returns Gauche
	 *     Gauche returns Gauche
	 *     Statement returns Gauche
	 *
	 * Constraint:
	 *     (duree=IntExp vitesse_deplacement=IntExp)
	 */
	protected void sequence_Gauche(ISerializationContext context, Gauche semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.GAUCHE__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.GAUCHE__DUREE));
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.GAUCHE__VITESSE_DEPLACEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.GAUCHE__VITESSE_DEPLACEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGaucheAccess().getDureeIntExpParserRuleCall_2_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getGaucheAccess().getVitesse_deplacementIntExpParserRuleCall_4_0(), semanticObject.getVitesse_deplacement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Includes returns Includes
	 *
	 * Constraint:
	 *     importURI=INCLUDE
	 */
	protected void sequence_Includes(ISerializationContext context, Includes semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.INCLUDES__IMPORT_URI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.INCLUDES__IMPORT_URI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIncludesAccess().getImportURIINCLUDETerminalRuleCall_2_0(), semanticObject.getImportURI());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IntConstante returns IntConstante
	 *     IntExp returns IntConstante
	 *
	 * Constraint:
	 *     val=INT
	 */
	protected void sequence_IntConstante(ISerializationContext context, IntConstante semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.INT_CONSTANTE__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.INT_CONSTANTE__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntConstanteAccess().getValINTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IntDecl returns IntDecl
	 *
	 * Constraint:
	 *     (name=ID val=IntExp)
	 */
	protected void sequence_IntDecl(ISerializationContext context, IntDecl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.INT_DECL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.INT_DECL__NAME));
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.INT_DECL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.INT_DECL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntDeclAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getIntDeclAccess().getValIntExpParserRuleCall_3_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (
	 *         includes+=Includes | 
	 *         SeconDec+=IntDecl | 
	 *         PourDec+=PourcentDecl | 
	 *         statements+=Statement | 
	 *         fonctions+=FonctionCall | 
	 *         parallele+=Parallele2 | 
	 *         parallele+=Parallele3 | 
	 *         fonctions+=FonctionDecl
	 *     )*
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MD returns Monter
	 *     Monter returns Monter
	 *     Statement returns Monter
	 *
	 * Constraint:
	 *     (duree=IntExp vitesse_verticale=IntExp)
	 */
	protected void sequence_Monter(ISerializationContext context, Monter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.MONTER__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.MONTER__DUREE));
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.MONTER__VITESSE_VERTICALE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.MONTER__VITESSE_VERTICALE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMonterAccess().getDureeIntExpParserRuleCall_2_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getMonterAccess().getVitesse_verticaleIntExpParserRuleCall_4_0(), semanticObject.getVitesse_verticale());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parallele2 returns Parallele2
	 *
	 * Constraint:
	 *     (
	 *         (a=MD t=GDr) | 
	 *         (a=MD t=AR) | 
	 *         (a=MD t=RGRD) | 
	 *         (t=GDr b=AR) | 
	 *         (t=GDr b=MD) | 
	 *         (t=GDr b=RGRD) | 
	 *         (t=RGRD a=MD) | 
	 *         (t=RGRD a=AR) | 
	 *         (t=RGRD a=GDr) | 
	 *         (t=AR a=MD) | 
	 *         (t=AR a=RGRD) | 
	 *         (t=AR a=GDr)
	 *     )
	 */
	protected void sequence_Parallele2(ISerializationContext context, Parallele2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parallele3 returns Parallele3
	 *
	 * Constraint:
	 *     (
	 *         (a=AR b=GDr c=MD) | 
	 *         (a=AR b=GDr c=RGRD) | 
	 *         (a=AR b=MD c=GDr) | 
	 *         (a=AR b=MD c=RGRD) | 
	 *         (a=AR b=RGRD c=MD) | 
	 *         (a=AR b=RGRD c=GDr) | 
	 *         (a=GDr b=AR c=MD) | 
	 *         (a=GDr b=AR c=RGRD) | 
	 *         (a=GDr b=MD c=AR) | 
	 *         (a=GDr b=MD c=RGRD) | 
	 *         (a=GDr b=RGRD c=AR) | 
	 *         (a=GDr b=RGRD c=MD) | 
	 *         (a=MD b=AR c=GDr) | 
	 *         (a=MD b=AR c=RGRD) | 
	 *         (a=MD b=GDr c=AR) | 
	 *         (a=MD b=GDr c=RGRD) | 
	 *         (a=MD b=RGRD c=GDr) | 
	 *         (a=MD b=RGRD c=AR) | 
	 *         (a=RGRD b=AR c=MD) | 
	 *         (a=RGRD b=AR c=GDr) | 
	 *         (a=RGRD b=MD c=AR) | 
	 *         (a=RGRD b=MD c=GDr) | 
	 *         (a=RGRD b=GDr c=MD) | 
	 *         (a=RGRD b=GDr c=AR)
	 *     )
	 */
	protected void sequence_Parallele3(ISerializationContext context, Parallele3 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Pause returns Pause
	 *     Statement returns Pause
	 *
	 * Constraint:
	 *     duree=IntExp
	 */
	protected void sequence_Pause(ISerializationContext context, Pause semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.PAUSE__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.PAUSE__DUREE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPauseAccess().getDureeIntExpParserRuleCall_2_0(), semanticObject.getDuree());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PourcentDecl returns PourcentDecl
	 *
	 * Constraint:
	 *     (name=ID val=IntExp)
	 */
	protected void sequence_PourcentDecl(ISerializationContext context, PourcentDecl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.POURCENT_DECL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.POURCENT_DECL__NAME));
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.POURCENT_DECL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.POURCENT_DECL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPourcentDeclAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPourcentDeclAccess().getValIntExpParserRuleCall_3_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AR returns Reculer
	 *     Reculer returns Reculer
	 *     Statement returns Reculer
	 *
	 * Constraint:
	 *     (duree=IntExp vitesse_deplacement=IntExp)
	 */
	protected void sequence_Reculer(ISerializationContext context, Reculer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.RECULER__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.RECULER__DUREE));
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.RECULER__VITESSE_DEPLACEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.RECULER__VITESSE_DEPLACEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReculerAccess().getDureeIntExpParserRuleCall_2_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getReculerAccess().getVitesse_deplacementIntExpParserRuleCall_4_0(), semanticObject.getVitesse_deplacement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RefIntVar returns RefIntVar
	 *     IntExp returns RefIntVar
	 *
	 * Constraint:
	 *     var=[IntDecl|ID]
	 */
	protected void sequence_RefIntVar(ISerializationContext context, RefIntVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.REF_INT_VAR__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.REF_INT_VAR__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefIntVarAccess().getVarIntDeclIDTerminalRuleCall_0_1(), semanticObject.eGet(MyTurtleDslPackage.Literals.REF_INT_VAR__VAR, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RGRD returns RotationDroite
	 *     RotationDroite returns RotationDroite
	 *     Statement returns RotationDroite
	 *
	 * Constraint:
	 *     (duree=IntExp vitesse_rotation=IntExp)
	 */
	protected void sequence_RotationDroite(ISerializationContext context, RotationDroite semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.ROTATION_DROITE__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.ROTATION_DROITE__DUREE));
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.ROTATION_DROITE__VITESSE_ROTATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.ROTATION_DROITE__VITESSE_ROTATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRotationDroiteAccess().getDureeIntExpParserRuleCall_2_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getRotationDroiteAccess().getVitesse_rotationIntExpParserRuleCall_4_0(), semanticObject.getVitesse_rotation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RGRD returns RotationGauche
	 *     RotationGauche returns RotationGauche
	 *     Statement returns RotationGauche
	 *
	 * Constraint:
	 *     (duree=IntExp vitesse_rotation=IntExp)
	 */
	protected void sequence_RotationGauche(ISerializationContext context, RotationGauche semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.ROTATION_GAUCHE__DUREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.ROTATION_GAUCHE__DUREE));
			if (transientValues.isValueTransient(semanticObject, MyTurtleDslPackage.Literals.ROTATION_GAUCHE__VITESSE_ROTATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyTurtleDslPackage.Literals.ROTATION_GAUCHE__VITESSE_ROTATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRotationGaucheAccess().getDureeIntExpParserRuleCall_2_0(), semanticObject.getDuree());
		feeder.accept(grammarAccess.getRotationGaucheAccess().getVitesse_rotationIntExpParserRuleCall_4_0(), semanticObject.getVitesse_rotation());
		feeder.finish();
	}
	
	
}
