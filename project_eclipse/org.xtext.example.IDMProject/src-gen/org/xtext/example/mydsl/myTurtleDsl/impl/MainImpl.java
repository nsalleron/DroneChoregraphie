/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.myTurtleDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myTurtleDsl.FonctionCall;
import org.xtext.example.mydsl.myTurtleDsl.IntDecl;
import org.xtext.example.mydsl.myTurtleDsl.Main;
import org.xtext.example.mydsl.myTurtleDsl.MyTurtleDslPackage;
import org.xtext.example.mydsl.myTurtleDsl.PourcentDecl;
import org.xtext.example.mydsl.myTurtleDsl.Statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Main</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myTurtleDsl.impl.MainImpl#getSeconDec <em>Secon Dec</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myTurtleDsl.impl.MainImpl#getPourDec <em>Pour Dec</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myTurtleDsl.impl.MainImpl#getStatements <em>Statements</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myTurtleDsl.impl.MainImpl#getFonctions <em>Fonctions</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myTurtleDsl.impl.MainImpl#getParallele <em>Parallele</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MainImpl extends MinimalEObjectImpl.Container implements Main
{
  /**
   * The cached value of the '{@link #getSeconDec() <em>Secon Dec</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSeconDec()
   * @generated
   * @ordered
   */
  protected EList<IntDecl> seconDec;

  /**
   * The cached value of the '{@link #getPourDec() <em>Pour Dec</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPourDec()
   * @generated
   * @ordered
   */
  protected EList<PourcentDecl> pourDec;

  /**
   * The cached value of the '{@link #getStatements() <em>Statements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatements()
   * @generated
   * @ordered
   */
  protected EList<Statement> statements;

  /**
   * The cached value of the '{@link #getFonctions() <em>Fonctions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFonctions()
   * @generated
   * @ordered
   */
  protected EList<FonctionCall> fonctions;

  /**
   * The cached value of the '{@link #getParallele() <em>Parallele</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParallele()
   * @generated
   * @ordered
   */
  protected EList<EObject> parallele;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MainImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyTurtleDslPackage.Literals.MAIN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<IntDecl> getSeconDec()
  {
    if (seconDec == null)
    {
      seconDec = new EObjectContainmentEList<IntDecl>(IntDecl.class, this, MyTurtleDslPackage.MAIN__SECON_DEC);
    }
    return seconDec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<PourcentDecl> getPourDec()
  {
    if (pourDec == null)
    {
      pourDec = new EObjectContainmentEList<PourcentDecl>(PourcentDecl.class, this, MyTurtleDslPackage.MAIN__POUR_DEC);
    }
    return pourDec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Statement> getStatements()
  {
    if (statements == null)
    {
      statements = new EObjectContainmentEList<Statement>(Statement.class, this, MyTurtleDslPackage.MAIN__STATEMENTS);
    }
    return statements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FonctionCall> getFonctions()
  {
    if (fonctions == null)
    {
      fonctions = new EObjectContainmentEList<FonctionCall>(FonctionCall.class, this, MyTurtleDslPackage.MAIN__FONCTIONS);
    }
    return fonctions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<EObject> getParallele()
  {
    if (parallele == null)
    {
      parallele = new EObjectContainmentEList<EObject>(EObject.class, this, MyTurtleDslPackage.MAIN__PARALLELE);
    }
    return parallele;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyTurtleDslPackage.MAIN__SECON_DEC:
        return ((InternalEList<?>)getSeconDec()).basicRemove(otherEnd, msgs);
      case MyTurtleDslPackage.MAIN__POUR_DEC:
        return ((InternalEList<?>)getPourDec()).basicRemove(otherEnd, msgs);
      case MyTurtleDslPackage.MAIN__STATEMENTS:
        return ((InternalEList<?>)getStatements()).basicRemove(otherEnd, msgs);
      case MyTurtleDslPackage.MAIN__FONCTIONS:
        return ((InternalEList<?>)getFonctions()).basicRemove(otherEnd, msgs);
      case MyTurtleDslPackage.MAIN__PARALLELE:
        return ((InternalEList<?>)getParallele()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyTurtleDslPackage.MAIN__SECON_DEC:
        return getSeconDec();
      case MyTurtleDslPackage.MAIN__POUR_DEC:
        return getPourDec();
      case MyTurtleDslPackage.MAIN__STATEMENTS:
        return getStatements();
      case MyTurtleDslPackage.MAIN__FONCTIONS:
        return getFonctions();
      case MyTurtleDslPackage.MAIN__PARALLELE:
        return getParallele();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyTurtleDslPackage.MAIN__SECON_DEC:
        getSeconDec().clear();
        getSeconDec().addAll((Collection<? extends IntDecl>)newValue);
        return;
      case MyTurtleDslPackage.MAIN__POUR_DEC:
        getPourDec().clear();
        getPourDec().addAll((Collection<? extends PourcentDecl>)newValue);
        return;
      case MyTurtleDslPackage.MAIN__STATEMENTS:
        getStatements().clear();
        getStatements().addAll((Collection<? extends Statement>)newValue);
        return;
      case MyTurtleDslPackage.MAIN__FONCTIONS:
        getFonctions().clear();
        getFonctions().addAll((Collection<? extends FonctionCall>)newValue);
        return;
      case MyTurtleDslPackage.MAIN__PARALLELE:
        getParallele().clear();
        getParallele().addAll((Collection<? extends EObject>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyTurtleDslPackage.MAIN__SECON_DEC:
        getSeconDec().clear();
        return;
      case MyTurtleDslPackage.MAIN__POUR_DEC:
        getPourDec().clear();
        return;
      case MyTurtleDslPackage.MAIN__STATEMENTS:
        getStatements().clear();
        return;
      case MyTurtleDslPackage.MAIN__FONCTIONS:
        getFonctions().clear();
        return;
      case MyTurtleDslPackage.MAIN__PARALLELE:
        getParallele().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyTurtleDslPackage.MAIN__SECON_DEC:
        return seconDec != null && !seconDec.isEmpty();
      case MyTurtleDslPackage.MAIN__POUR_DEC:
        return pourDec != null && !pourDec.isEmpty();
      case MyTurtleDslPackage.MAIN__STATEMENTS:
        return statements != null && !statements.isEmpty();
      case MyTurtleDslPackage.MAIN__FONCTIONS:
        return fonctions != null && !fonctions.isEmpty();
      case MyTurtleDslPackage.MAIN__PARALLELE:
        return parallele != null && !parallele.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //MainImpl
